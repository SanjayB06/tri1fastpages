{
  
    
        "post0": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) print(&quot;Sanjay&#39;s Python Notebook&quot;) . Hello World Sanjay&#39;s Python Notebook .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/05/Python-Jupyter-Notebook.html",
            "relUrl": "/2023/04/05/Python-Jupyter-Notebook.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Primitives Notebook",
            "content": "public class Primitives { public static void main(String[] args) { int sampleint = 1324; double sampledouble = 3.14; boolean samplebool = false; String samplestring = &quot;hello world&quot;; String diffstring = new String(&quot;hllo wrld&quot;); System.out.println(&quot;Integer: &quot; + sampleint); System.out.println(&quot;Double: &quot; + sampledouble); System.out.println(&quot;Boolean: &quot; + samplebool); System.out.println(&quot;String: &quot; + samplestring); System.out.println(&quot;Different String: &quot; + diffstring); } } Primitives.main(null) . Integer: 1324 Double: 3.14 Boolean: false String: hello world Different String: hllo wrld . import java.util.Scanner; public class InpPrimitives { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type an integer: &quot;); try { int UserIntInput = input.nextInt(); System.out.println(UserIntInput); } catch (Exception e) { // if not an integer System.out.println(&quot;That is not an integer (form like 159), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type a double: &quot;); try { double UserDoubleInput = input.nextDouble(); System.out.println(UserDoubleInput); } catch (Exception e) { System.out.println(&quot;That is not a double (form like 9.99), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type a boolean: &quot;); try { boolean UserBoolInput = input.nextBoolean(); System.out.println(UserBoolInput); } catch (Exception e) { System.out.println(&quot;That is not a boolean (true or false), &quot; + e); } input.close(); input = new Scanner(System.in); System.out.print(&quot;Type a string: &quot;); try { String UserStringInput = input.nextLine(); System.out.println(UserStringInput); } catch (Exception e) { System.out.println(&quot;That is not a string, &quot; + e); } input.close(); } } InpPrimitives.main(null); . Enter an integer: 5 5 Enter a double: 2 2.0 Enter a boolean: 5 Not an boolean (true or false), java.util.InputMismatchException Enter a String: 1 1 . public class PrimitiveDivision { public static void main(String[] args) { int sampleint1 = 7, sampleint2 = 2; System.out.println(&quot;Dividing integers&quot;); System.out.println(&quot; tConcatenation example: &quot; + sampleint1 + &quot;/&quot; + sampleint2 + &quot; = &quot; + sampleint1/sampleint2); System.out.println(String.format(&quot; tUsing string formatting: %d/%d = %d&quot;,sampleint1, sampleint2, sampleint1/sampleint2)); System.out.printf(&quot; tint output with printf: %d/%d = %d&quot;,sampleint1, sampleint2, sampleint1/sampleint2); double doub1 = 7.1, doub2 = 2.1; System.out.println(&quot; nDouble Division&quot;); System.out.println(&quot; tConcatenation example: &quot; + doub1 + &quot;/&quot; + doub2 + &quot; = &quot; + doub1/doub2); System.out.println(String.format(&quot; tString formatting: %.2f/%.2f = %.2f&quot;,doub1, doub2, doub1/doub2)); System.out.printf(&quot; tPrintf formatting: %.2f/%.2f = %.2f n&quot;,doub1, doub2, doub1/doub2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,sampleint1, sampleint2, sampleint1/(double)sampleint2); System.out.println(&quot; tint using modulo for remainder: &quot; + sampleint1 + &quot;/&quot; + sampleint2 + &quot; = &quot; + sampleint1/sampleint2 + &quot; remainder &quot; + sampleint1%sampleint2); } } PrimitiveDivision.main(null); . Dividing integers Concatenation example: 7/2 = 3 Using string formatting: 7/2 = 3 int output with printf: 7/2 = 3 Double Division Concatenation example: 7.1/2.1 = 3.3809523809523805 String formatting: 7.10/2.10 = 3.38 Printf formatting: 7.10/2.10 = 3.38 Casting and Remainders int cast to double on division: 7/2 = 3.50 int using modulo for remainder: 7/2 = 3 remainder 1 . public class GradeCalculator { ArrayList&lt;Double&gt; grades; public GradeCalculator() { this.grades = new ArrayList&lt;&gt;(); this.enterGrades(); } private boolean isZero(double value){ double threshold = 0.001; return value &gt;= -threshold &amp;&amp; value &lt;= threshold; } private void enterGrades() { Scanner input; while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter a double, 0 to exit: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); if (isZero(sampleInputDouble)) break; else this.grades.add(sampleInputDouble); } catch (Exception e) { System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); } } public double average() { double total = 0; for (double num : this.grades) { total += num; } return (total / this.grades.size()); } public static void main(String[] args) { GradeCalculator grades = new GradeCalculator(); System.out.println(&quot;Average: &quot; + String.format(&quot;%.2f&quot;, grades.average())); } } GradeCalculator.main(null); . Enter a double, 0 to exit: 9 9.0 Enter a double, 0 to exit: 9 9.0 Enter a double, 0 to exit: 9 9.0 Enter a double, 0 to exit: 0 0.0 Average: 9.00 . class PrimitiveDemo { public static void main(String[] args) { int DemInt = 143; double DemDoub = 22.7; boolean DemBool = false; String myStr = &quot;Hello World&quot;; System.out.println(DemInt); System.out.println(DemDoub); System.out.println(DemBool); System.out.println(myStr); } } PrimitiveDemo.main(null) . 143 22.7 false Hello World . // Hack 1: Celsius to Farenheit Calculator class CTF { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Type in a temperature in celsius: &quot;); try { int UserIntInput = input.nextInt(); double Faren = ((UserIntInput * 9)/5) + 32; // formula System.out.println(UserIntInput + &quot; in celsius is &quot; + Faren + &quot; Farenheit.&quot;); // output string } catch (Exception e) { System.out.println(&quot;That is not a valid temperature &quot; + e); } } } CTF.main(null) . Type in a temperature in celsius: 5 5 in celsius is 41.0 Farenheit. . // Hack: Nth Fibbonacci class Fibo { public static void main(String[] args) { Scanner input; input = new Scanner(System.in); // take user input System.out.print(&quot;Type in a number &quot;); try { int N = input.nextInt(); // how far to go int i1 = 0, i2 = 1; // starting numbers int count = 0; // iteration while (count &lt; N) { System.out.print(i1 + &quot; &quot;); int i3 = i2 + i1; i1 = i2; i2 = i3; count = count + 1; } } catch (Exception e) { System.out.println(&quot;That is not a valid temperature &quot; + e); } } } Fibo.main(null) . Type in a number 5 0 1 1 2 3 .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/05/Primitives-Notebook.html",
            "relUrl": "/2023/04/05/Primitives-Notebook.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/05/Java-Jupyter-Notebook.html",
            "relUrl": "/2023/04/05/Java-Jupyter-Notebook.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Java ArrayList",
            "content": "Definition . An ArrayList is like an array that has more flexibility, so it can be resized and things can be added and removed after the array is created. No size limit, and it can have duplicate elements. . import java.util.ArrayList; ArrayList&lt;String&gt; matches = new ArrayList&lt;String&gt;(); matches.add(&quot;barcelona&quot;); matches.add(&quot;beat&quot;); matches.add(&quot;real madrid&quot;); matches.add(&quot;4-0&quot;); matches.add(&quot;last&quot;); matches.add(&quot;year&quot;); System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year] . Add and addAll . Adding elements using add(). Can also be added at a certain index if specified. addAll() is used to add all the elements from one array to another. . matches.add(&quot;.&quot;); //adds the ! to the end of the arraylist matches.add(1, &quot;easily&quot;); //adds the word very to the list at index 4 System.out.println(matches); . [barcelona, easily, beat, real madrid, 4-0, last, year, .] . Size . This returns the size of the list by using size(). . ArrayList&lt;String&gt; more_matches = new ArrayList&lt;String&gt;(); more_matches.add(&quot;barcelona&quot;); more_matches.add(&quot;lost&quot;); more_matches.add(&quot;to&quot;); more_matches.add(&quot;liverpool&quot;); more_matches.add(&quot;4-3&quot;); //this is very true matches.addAll(more_matches); //adds the second list to the first one System.out.println(matches); matches.size(); . [barcelona, easily, beat, real madrid, 4-0, last, year, ., barcelona, lost, to, liverpool, 4-3] . 13 . Remove (int index) and (element) . This method remove(), removes an element from the index, it shifts the other elements and decreases index by the amount of elements removed. Can be used by removing the index number or the name of the element. . matches.remove(1); //you can see that the word &quot;are&quot; has been removed System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year, ., barcelona, lost, to, liverpool, 4-3] . matches.remove(&quot;4-3&quot;); matches.remove(&quot;lost&quot;); System.out.println(matches); . [barcelona, beat, real madrid, 4-0, last, year, ., barcelona, to, liverpool] . Get . The get() method returns elements at the specific index. . matches.get(0); . barcelona . Set . The set() method replaces an element at an index with another element . matches.set(3, new String(&quot;CF&quot;)); System.out.println(matches); . [barcelona, beat, real madrid, CF, last, year, ., barcelona, to, liverpool] . IndexOf . The indexOf() method returns when the element occurs first or -1 if its not there. . matches.indexOf(&quot;barcelona&quot;); . 0 . lastIndexOf(element) . This method returns the index of when the element comes up last, or -1 if its not in the list. . matches.indexOf(&quot;chelsea&quot;); . -1 . hashCode() . Returns the hashcode value of a list, a hashcode is an integer value that corresponds with an object. . matches.hashCode(); . -1011032613 . isEmpty . This method checks if the list is empty or not, and returns true or false if it is empty or not respectively. . matches.isEmpty(); . false . more_matches.isEmpty(); . false . contains(element) . This checks if the list has a certain element, true if it does and false if it doesn&#39;t. . matches.contains(&quot;real madrid&quot;); . true . matches.contains(&quot;inter&quot;); . false . Sort . This method sorts the elements of a list based on a comparator. . import java.util.Collections; System.out.println(&quot;List : &quot;+matches); //will sort the string according to alphabetical order Collections.sort(matches); System.out.println(&quot;Sorted List : &quot;+matches); . List : [barcelona, beat, real madrid, CF, last, year, ., barcelona, to, liverpool] Sorted List : [., CF, barcelona, barcelona, beat, last, liverpool, real madrid, to, year] . matches.clear(); //clears all the elements in list System.out.println(matches); //they&#39;re all gone, how sad . [] .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/05/Java-ArrayList.html",
            "relUrl": "/2023/04/05/Java-ArrayList.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Bash Notebook",
            "content": "python --version echo &quot;&quot; python2 --version echo &quot;&quot; java --version echo &quot;&quot; javac --version echo &quot;&quot; conda --version echo &quot;&quot; conda list | grep &quot;jupyter&quot; echo &quot;&quot; jupyter --version echo &quot;&quot; jupyter kernelspec list echo &quot;&quot; npm -version . Python 3.9.12 Python 2.7.18 openjdk 18.0.2 2022-07-19 OpenJDK Runtime Environment Homebrew (build 18.0.2+0) OpenJDK 64-Bit Server VM Homebrew (build 18.0.2+0, mixed mode, sharing) javac 18.0.2 conda 4.13.0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/smb/Library/Jupyter/kernels/bash java /Users/smb/Library/Jupyter/kernels/java javascript /Users/smb/Library/Jupyter/kernels/javascript python3 /Users/smb/opt/anaconda3/share/jupyter/kernels/python3 6.4.1 .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/05/Bash-Notebook.html",
            "relUrl": "/2023/04/05/Bash-Notebook.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Sorting Algs",
            "content": "public class BubbleSort{ public static void main(String[] args) { int[] bubble_arr = {23,56,21,34,678,2,4,7,2235,996,446,999,6574,87,67,902,8754}; System.out.print(&quot;Original: &quot;); for(int index=0; index&lt;bubble_arr.length; index++){ System.out.print(bubble_arr[index] + &quot;, &quot;); } System.out.println(); boolean swap = true; while(swap) { swap = false; for(int i=0; i&lt;bubble_arr.length-1; i++){ if (bubble_arr[i]&gt;bubble_arr[i+1]){ swap = true; int temp = bubble_arr[i]; bubble_arr[i] = bubble_arr[i+1]; bubble_arr[i+1] = temp; } } } System.out.print(&quot;Sorted: &quot;); for(int index=0; index&lt;bubble_arr.length; index++){ System.out.print(bubble_arr[index] + &quot;, &quot;); } } } BubbleSort.main(null); . Big O Analysis . The worst-case time complexity of Bubble Sort is O(n^2). . worst case for outer loop is n-1 . | worst case for inner loop is all swaps. meaning (n-1)(n-2)/2. . | Therefore, worst case is O(n^2) . | . the time complexity of the Bubble Sort algorithm is O(n^2). . public class Insertion{ public static void main(String[] args){ int[] array = {16,3,123,617,261,51,126,6,23,2,16,1236}; for(int i = 0; i&lt;array.length; i++){ System.out.print(array[i] + &quot;, &quot;); } System.out.println(); for(int index=1; index&lt;array.length; index++){ for(int sorted_index = index; sorted_index&gt;0; sorted_index--){ if(array[sorted_index]&lt;array[sorted_index-1]){ int temp = array[sorted_index]; array[sorted_index] = array[sorted_index-1]; array[sorted_index-1] = temp; } } } for (int i = 0; i&lt;array.length; i++){ System.out.print(array[i] + &quot;, &quot;); } } } Insertion.main(null); . Big O analysis . worst case for first loop is every element, O(n) . | second for loop iterates through array (n-1) times . | worst case is if every element is moved to the beginning . | . Worst case is O(n^2) . time complexity of the Insertion Sort algorithm is O(n^2). . public class Selection { public static void main(String[] args){ int[] array = {236,16,3156,3325135,51,24567,12,3251,15}; for (int i = 0; i&lt;array.length; i++){ System.out.print(array[i] + &quot;, &quot;); } System.out.println(); int times = array.length; for (int outer=times; outer&gt;0; outer--){ int min = 0xFFFFFF; int min_idx = 0; for(int i=0; i&lt;outer; i++){ if(array[i] &lt; min){ min = array[i]; min_idx = i; } } for (int j = min_idx+1; j &lt; array.length; j++){ array[j-1]=array[j]; } array[array.length-1] = min; } for (int i = 0; i&lt;array.length; i++){ System.out.print(array[i] + &quot;, &quot;); } } } Selection.main(null); . 236, 16, 3156, 3325135, 51, 24567, 12, 3251, 15, 12, 15, 16, 51, 236, 3156, 3251, 24567, 3325135, . big o analysis . The given code implements the Selection Sort algorithm for sorting an array of integers. The worst-case time complexity of Selection Sort is O(n^2) where n is the number of elements in the array. . first for loop takes O(n) times . | inner loop iterates over unsorted portion of the array (n-1) . | complexity is O(n^2) the time complexity of the Selection Sort algorithm is O(n^2). . | . public class MergeSort { public static void main(String[] args){ int[] arr = {12,126,51237,32635,164,236,126,26,714}; mergeSort(arr, 0, arr.length-1); for(int i=0; i&lt;arr.length; i++){ System.out.print(arr[i] + &quot;, &quot;); } } public static void mergeSort(int[] arr, int left, int right){ if(left &lt; right){ int mid = (left+right)/2; mergeSort(arr, left, mid); mergeSort(arr, mid+1, right); merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right){ int[] temp = new int[right-left+1]; int i = left; int j = mid+1; int k = 0; while(i &lt;= mid &amp;&amp; j &lt;= right){ if(arr[i] &lt; arr[j]){ temp[k] = arr[i]; k++; i++; } else{ temp[k] = arr[j]; k++; j++; } } while(i &lt;= mid){ temp[k] = arr[i]; k++; i++; } while(j &lt;= right){ temp[k] = arr[j]; k++; j++; } for(int x=0; x&lt;temp.length; x++){ arr[left+x] = temp[x]; } } } . Big O analysis . The big O time complexity of Merge Sort is O(n log n), where n is the number of elements in the array. . This is because Merge Sort recursively divides the input by half until each of the arrays only has one value. The reason for this is because Merge Sort algorthim uses linear time 0(n) to merge the subarrays into a sorted array where n is the total number of elements in both subarrays. By using this we find that the time complexity of Merge Sort is O(n log n). . import java.util.HashMap; import java.lang.Integer; import java.util.Scanner; public class Hash { public static void main(String[] args){ HashMap&lt;Integer, Integer&gt; numberhash = new HashMap&lt;Integer, Integer&gt;(); int[] list = new int[5000]; for (int i = 0; i &lt; list.length; i++) { Integer value = (int) (Math.random() * 5000); numberhash.put(value, value); list[i] = value; } for (int i = 0; i&lt;12; i++) { System.out.println(&quot;Run &quot; + (i+1)); Integer target = (int) (Math.random() * 5000); long lookUpTime = (lookUp(numberhash, target)); System.out.println(&quot;Look up time: &quot; + lookUpTime + &quot; nanoseconds&quot;); long binarySearchTime = (binarySearchTime(list, target)); System.out.println(&quot;Binary search time: &quot; + binarySearchTime + &quot; nanoseconds&quot;); } } public static long lookUp(HashMap&lt;Integer, Integer&gt; hashmap, Integer value) { long start = System.nanoTime(); hashmap.containsKey(value); long end = System.nanoTime(); return (end - start); } public static long binarySearchTime(int[] list, Integer value) { long start = System.nanoTime(); int low = 0; int high = list.length - 1; int middle = (low + high) / 2; while (low &lt;= high) { if (list[middle] &lt; value) { low = middle + 1; } else if (list[middle] == value) { break; } else { high = middle - 1; } middle = (low + high) / 2; } long end = System.nanoTime(); return (end - start); } } Hash.main(null); . Run 1 Look up time: 875 nanoseconds Binary search time: 2000 nanoseconds Run 2 Look up time: 1375 nanoseconds Binary search time: 1792 nanoseconds Run 3 Look up time: 500 nanoseconds Binary search time: 1584 nanoseconds Run 4 Look up time: 584 nanoseconds Binary search time: 1875 nanoseconds Run 5 Look up time: 1000 nanoseconds Binary search time: 2292 nanoseconds Run 6 Look up time: 1125 nanoseconds Binary search time: 2166 nanoseconds Run 7 Look up time: 541 nanoseconds Binary search time: 1667 nanoseconds Run 8 Look up time: 541 nanoseconds Binary search time: 1625 nanoseconds Run 9 Look up time: 1000 nanoseconds Binary search time: 2167 nanoseconds Run 10 Look up time: 1250 nanoseconds Binary search time: 2000 nanoseconds Run 11 Look up time: 1042 nanoseconds Binary search time: 2458 nanoseconds Run 12 Look up time: 1125 nanoseconds Binary search time: 2958 nanoseconds .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/04/04/Sorting.html",
            "relUrl": "/2023/04/04/Sorting.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 4 Hacks",
            "content": "Linked Lists . import java.util.LinkedList; LinkedList&lt;String&gt; testlink = new LinkedList&lt;String&gt;(); testlink.add(&quot;Strings&quot;); testlink.add(&quot;Data&quot;); testlink.add(&quot;BST&quot;); System.out.println(testlink) . [Strings, Data, BST] . testlink.remove(); System.out.println(testlink) . [Data, BST] . testlink.clear(); System.out.println(testlink) . [] . System.out.println(testlink.getFirst()); System.out.println(testlink.getLast()); . java.util.NoSuchElementException: null at java.base/java.util.LinkedList.getFirst(LinkedList.java:248) at .(#26:1) . Queues . Queue&lt;String&gt; Articles = new LinkedList&lt;String&gt;(); Articles.add(&quot;BST Tutorial&quot;); Articles.add(&quot;Checkpoint 1&quot;); Articles.add(&quot;Wrapper Classes&quot;); System.out.println(Articles); . [BST Tutorial, Checkpoint 1, Wrapper Classes] . Articles.poll(); System.out.println(Articles); System.out.println(Articles.contains(&quot;BST Tutorial&quot;)); . [Checkpoint 1, Wrapper Classes] false . Stacks . import java.util.Stack; Stack&lt;String&gt; tags = new Stack&lt;String&gt;(); tags.add(&quot;C++&quot;); tags.add(&quot;Java&quot;); tags.add(&quot;HTML&quot;); tags.add(&quot;Javascript&quot;); System.out.println(tags); . [C++, Java, HTML, Javascript] . System.out.println(tags.pop()); System.out.println(tags); System.out.println(tags.set(1, &quot;Python&quot;)); System.out.println(tags.size()); . Javascript [C++, Java, HTML] Java 3 . Collectables . public class CancodeUser&lt;T&gt; { private T user; public CancodeUser(T user) { this.user = user; } public T getUser() { return user; } public void setUser(T user) { this.user = user; } public static void main(String[] args) { CancodeUser&lt;String&gt; user1 = new CancodeUser&lt;&gt;(&quot;Sanjay B&quot;); CancodeUser&lt;String&gt; user2 = new CancodeUser&lt;&gt;(&quot;Evan Y&quot;); CancodeUser&lt;String&gt; user3 = new CancodeUser&lt;&gt;(&quot;Lionel Messi&quot;); System.out.println(user1.getUser()); System.out.println(user2.getUser()); System.out.println(user3.getUser()); } } CancodeUser.main(null); . Sanjay B Evan Y Lionel Messi .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/03/26/Hacks-Week-4.html",
            "relUrl": "/2023/03/26/Hacks-Week-4.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Hacks Week 3",
            "content": "Template Class . public abstract class Templates { public final String masterType = &quot;Template&quot;; private String type; public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); public String getMasterType() { return masterType; } public String getType() { return type; } public void setType(String type) { this.type = type; } public abstract String toString(); public static void print(Templates[] objs) { System.out.println(objs.getClass() + &quot; &quot; + objs.length); if (objs.length &gt; 0) { Templates obj = objs[0]; System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } for(Object o : objs) System.out.println(o); System.out.println(); } } . public class Messages extends Generics { public static KeyTypes key = KeyType.title; public static void setOrder(KeyTypes key) { Messages.key = key; } public enum KeyType implements KeyTypes {title, sender, timestamp, text} private final String sender; private final int timestamp; private final String text; public Messages(String sender, int timestamp, String text) { super.setType(&quot;Messages&quot;); this.sender = sender; this.timestamp = timestamp; this.text = text; } // overrides data from parent class @Override protected KeyTypes getKey() { return Messages.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.sender.equals(this.getKey())) { output += this.sender; } else if (KeyType.timestamp.equals(this.getKey())) { output += &quot;00&quot; + this.timestamp; output = output.substring(output.length() - 2); } else if (KeyType.text.equals(this.getKey())) { output += this.text; } else { output += super.getType() + &quot;: &quot; + this.sender + &quot;, &quot; + this.text + &quot;, &quot; + this.timestamp; } return output; } // Test data initializer public static Messages[] Messagess() { return new Messages[]{ new Messages(&quot;sanjay&quot;, 1203, &quot;sample message&quot;), new Messages(&quot;user1&quot;, 0304, &quot;another message example&quot;), new Messages(&quot;sampleuser&quot;, 0401, &quot;hello world&quot;), }; } /* main to test Messages class * */ public static void main(String[] args) { // Inheritance Hierarchy Messages[] objs = Messagess(); // print with title Messages.setOrder(KeyType.title); Messages.print(objs); // print sender only Messages.setOrder(KeyType.sender); Messages.print(objs); } } Messages.main(null); . class [LREPL.$JShell$15C$Messages; 3 Generic: Messages listed by title Messages: sanjay, sample message, 1203 Messages: user1, another message example, 196 Messages: sampleuser, hello world, 257 class [LREPL.$JShell$15C$Messages; 3 Generic: Messages listed by sender sanjay user1 sampleuser . Overriding . public class CanCode { // Main driver method public static void main(String[] args) { // Creating object of class1 // inside main() method Page c1 = new Page(10, 15); // Printing the complex number System.out.println(c1); } } class Page { // Attributes of a complex number private double re, im; // Constructor to initialize a complex number // Default // public Page() { // this.re = 0; // this.im = 0; // } // Constructor 2: Parameterized public Page(double re, double im) { // This keyword refers to // current complex number this.re = re; this.im = im; } // Getters public double getReal() { return this.re; } public double getImaginary() { return this.im ; } // Setters public void setReal(double re) { this.re = re; } public void setImaginary(double im) { this.im = im; } // Overriding toString() method of String class @Override public String toString() { return this.re + &quot; + &quot; + this.im + &quot;i&quot;; } } CanCode.main(null); . 10.0 + 15.0i . Original Class . public class Excercises { public String topic; public int difficulty; public int successrate; public Articles(String starttopic, int startsuccessrate, int startdifficulty) { difficulty = startdifficulty; topic = starttopic; successrate = startsuccessrate; } public void settopic(String newTopic) { topic = newTopic; } public void setdifficulty(int editDiff) { difficulty = editDiff; } public void successrateUp(int increment) { successrate += increment; } } . public class UserExcercise extends Excercises { public int userID; public UserExcercise(int startuserID, String starttopic, int startsuccessrate, int startdifficulty) { super(starttopic, startsuccessrate, startdifficulty); userID = startuserID; } public void setFact(int newValue) { seatFact = newValue; } } . Linked List . public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . Queue Hacks .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/03/20/Hacks-Week-3.html",
            "relUrl": "/2023/03/20/Hacks-Week-3.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "39 Questions Test Corrections - Evan Corrections",
            "content": "Questions Test Corrections . This is my score, 32/39 . . 1). . When the initial value of choice is greater than or equal to 5 and also less than or equal to 10, the first two if tests fail in both code segments, causing “yellow” to be printed. Therefore, the two code segments produce the same output when choice has an initial value that is greater than or equal to 5 and also less than or equal to 10. When choice is greater than 10, code segment A will print “blue” and the else statements are not executed. Code segment B will print “blue” but will then execute the next if statement and print “yellow”, thereby giving different output for initial values that are greater than 10. The Videos given to us are very helpful as they are given from the AP website itself so not only does it prep us for this class but for the Exam as well. It provides three different videos allowing for the mastery of variable choices. . 2). . This decleration that I chose is incorrect as the two code segments print different values for grades 80 and above. If i input 84% then Segment 1 will give me 3.0 and Segment 2 will give me 4.0 Code segment I uses else statements, points is only ever incremented once. Because code segment II does not use else statements, it is possible for multiple conditions to be true, causing points to be incremented multiple times. For grades lower than 70, both code segments print 0.0. For grades from 70 to 79, both code segments print 2.0. For grades from 80 to 89, code segment I prints 3.0 and code segment II prints 5.0. For grades 90 or above, code segment I prints 4.0 and code segment II prints 9.0. The Videos given to us are very helpful as they are given from the AP website itself so not only does it prep us for this class but for the Exam as well. It provides three different videos allowing for the mastery of reading code. . 3). . Code segment III does not produce the same output as the original code segment. It creates a local boolean variable and assigns it the result of x % 2 == 0, but when using it in the if statement, the wrong branch is taken so that “YES” is printed for even integers and “NO” is printed for odd integers. The original code segment prints “YES” for odd integers and “NO” for even integers. Code segment I produces the same output as the original code segment because the result of evaluating the expression x % 2 has only two possible values: 0 if x is even and 1 if x is odd. Code segment II produces the same output as the original code segment because the second else clause that prints “NONE” is never reached. Code segment III does not produce the same output as the original code segment. It creates a local boolean variable and assigns it the result of x % 2 == 0, but when using it in the if statement, the wrong branch is taken so that “YES” is printed for even integers and “NO” is printed for odd integers. By refering to the two different videos mentioned in the related videos this can intensely prep me for problem solving and seeing problems within code. . 4). . I had chosen E, The opposite of !(a != b) is just (a != b). When you apply De Morgan’s Law the logic operator and (&amp;&amp;) becomes an or (||) and vice versa. The opposite of (b &gt; 7) is (b &lt;= 7). The correct answer B, De Morgan’s Law states that !(p &amp;&amp; q) is equivalent to !p || !q. By applying De Morgan’s Law to this expression, we negate the first expression !(!(a !=b)) and the second expression !(b &gt;7) to form !(!(a != b)) || !(b &gt; 7). In the first expression the two consecutive not operators (!) cancel each other out giving us (a != b). In the second expression, the opposite of &gt; is &lt;= giving us (b &lt;= 7). The equivalent expression is (a != b) || (b &lt;= 7). This time, there was a question that was refrenced in the review portion, I could use all of these tools to boost my learning and if 2 videos and eight other practice problem wont do the job then researching and finding more practice problems, watching youtube videos, and etc. . 5). . In this case, the method will return true since all is assigned the value “darkroomcartoonarticulate” which contains “art”. This is the expected return value since “art” is in both “cartoon” and “articulate”. In this case, the method should return false since the word “art” is not found in “rattrap”, “similar”, or “today”. When the method concatenates all three words together, all is assigned the value “rattrapsimilartoday”. The “ar” in “similar” gets concatenated with the “t” in “today”, resulting in the letter combinations for “art” to be in all, causing the method to incorrectly return true. . 6). . This would result from incrementing counter when “a” is followed by “b”, even if there is a space between them. This occurs two times. The expression str.substring(i, i + 1).equals(“a”) will evaluate to true if str contains the string “a” at position i. The expression !str.substring(i + 1, i + 2) will evaluate to true if str does not contain the string “b” at position i + 1. The variable counter is incremented when both of those expressions evaluate to true or, in other words, whenever “a” is not immediately followed by “b”. This occurs five times in the given string: “a “, “ac”, “at”, “at”, and “a “. . 7). . The given code segment prints 1357, while this code segment prints 13579. The given code segment starts when k is 1 and prints every other value as long as k is less than or equal to 7. This code segment starts when k is 1 and prints every other value as long as k is less than or equal to 8. Both code segments print 1357. This time, there was a question that was refrenced in the review portion, I could use all of these tools to boost my learning and if 2 videos and eight other practice problem wont do the job then researching and finding more practice problems, watching youtube videos, and etc. .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2023/03/13/evan-is-autistic.html",
            "relUrl": "/markdown/2023/03/13/evan-is-autistic.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "2015 Practice Quiz",
            "content": "Question 18 . . I got this question wrong because I didn’t notice that the rows and columns were initizalized to the wrong values to return these values. If row was set to 0 it would work. | Answer E is correct because it acknowledges that the initial row it set to 1 which meants that the first row is not printed. | I can watch 8.2 daily videos 1-3 to learn this concept. | . Question 27 . . I got this problem wrong because I didn’t realize that the substring would not be out of bounds since rep will stop at length - 1 and therefore doing a substring until rep+2 would just pring out the last letter. | Answer C is correct because it follows the pattern correctly. | I can watch 2.7 and 4.2 daily videos 1-3 to learn this concept. | . Question 34 . . I got this wrong because I didn’t realize that the List would not actually be changed since the remove statement occurs after. | Answer B is correct because it shows that the list never actually changes after the code snippet. | I can watch 2.7 daily videos 1-3 and 7.4 daily video 2 to learn this concept. | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2023/03/12/test-corrections-2015.html",
            "relUrl": "/markdown/2023/03/12/test-corrections-2015.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Data Types",
            "content": "Binary . import java.util.Scanner; public class Binary { public static void main(String[] args) { int i = 0, carry = 0; int[] sum = new int[10]; int b1 = 1; int b2 = 1; while (b1 != 0 || b2 != 0) { sum[i++] = (int)((b1 % 10 + b2 % 10 + carry) % 2); carry = (int)((b1 % 10 + b2 % 10 + carry) / 2); b1 = b1 / 10; b2 = b2 / 10; } if (carry != 0) { sum[i++] = carry; } --i; System.out.print(&quot;1 + 1 = &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); } System.out.print(&quot; n&quot;); } } Binary.main(null); . Primitive Examples . import java.util.Random; public class PrimitiveTypesExample { public static void main(String[] args) { int[] numbers = {1, 2, 3, 4, 5}; int randomNumber = new Random().nextInt(numbers.length); System.out.println(&quot;random: &quot; + numbers[randomNumber]); double e = 2.7182818284590452353602874713527; System.out.println(&quot;Euler&#39;s number: &quot; + e); boolean raining = true; System.out.println(&quot;Is it raining? &quot; + raining); String message = &quot;hellow wrld&quot;; char firstLetter = message.charAt(0); System.out.println(&quot;First letter : &quot; + firstLetter); } } PrimitiveTypesExample.main(null); . Wrapper Class Examples . import java.util.Arrays; public class PrimitiveTypesExample { public static void main(String[] args) { Integer[] numbers = {1, 2, 3, 4, 5}; int sum = Arrays.stream(numbers).mapToInt(Integer::intValue).sum(); System.out.println(&quot;Sum of numbers: &quot; + sum); Double[] temperatures = {25.6, 28.9, 30.1, 23.4, 21.0}; double average = Arrays.stream(temperatures).mapToDouble(Double::doubleValue).average().getAsDouble(); System.out.println(&quot;Average temperature: &quot; + average); boolean[] booleanArray = new boolean[]{true, false, true, false, true}; boolean randomBoolean = booleanArray[(int) (Math.random() * booleanArray.length)]; Boolean[] booleanArray = new Boolean[]{true, false, true, false, true}; Boolean randomBoolean = booleanArray[(int) (Math.random() * booleanArray.length)]; String charString = &quot;hello world&quot;; char[] charArray = charString.toCharArray(); String randomCharString = charString.substring((int) (Math.random() * charString.length()), (int) (Math.random() * charString.length() + 1)); char randomChar = randomCharString.charAt(0); } } PrimitiveTypesExample.main(null); . Methods and Control Structures . Methods . In Java, a method is a set of code that performs a specific task. Methods enable code reusability and modularity. A method can receive parameters as input and return a value as output. . Control Structures . Control structures are programming statements that manage the program’s execution flow. In Java, conditional statements, loops, and switch statements are the common control structures. . Methods and Control Structures in methodDataTypes . methodDataTypes is a Java project consisting of various classes that exemplify the use of methods and control structures. For instance, the DiverseArrays and Matrix classes demonstrate the use of control structures like loops and conditional statements to perform operations on arrays and matrices. The Number and Random classes demonstrate the use of control structures for performing operations on numbers, and the DoNothingByValue and IntByReference classes illustrate how passing parameters to methods works. Lastly, the Menu class demonstrates the use of control structures to control the flow of execution of the program. . import java.util.Scanner; public class Menu { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int choice = 0; Runnable menuRunnable = () -&gt; { System.out.println(&quot;Menu:&quot;); System.out.println(&quot;1. Option 1&quot;); System.out.println(&quot;2. Option 2&quot;); System.out.println(&quot;3. Option 3&quot;); System.out.println(&quot;4. Exit&quot;); System.out.print(&quot;Enter your choice: &quot;); }; while (choice != 4) { try { menuRunnable.run(); choice = scanner.nextInt(); scanner.nextLine(); switch (choice) { case 1: System.out.println(&quot;Option 1 selected&quot;); break; case 2: System.out.println(&quot;Option 2 selected&quot;); break; case 3: System.out.println(&quot;Option 3 selected&quot;); break; case 4: System.out.println(&quot;Goodbye!&quot;); break; default: System.out.println(&quot;Invalid choice!&quot;); break; } } catch (Exception e) { System.out.println(&quot;Invalid input. Please try again.&quot;); scanner.nextLine(); } } scanner.close(); } } Menu.main(null); . 2019 FRQ Question 1 . a. . public ArrayList&lt;String&gt; getDelimitersList(String[] tokens) { ArrayList&lt;String&gt; d = new ArrayList&lt;String&gt;(); for (String str : tokens) { if (str.equals(openDel) || str.equals(closeDel)) { d.add(str); } } return d; } . The above code is a Java method that takes an array of strings called “tokens” as input and returns an ArrayList of strings containing only the strings that are equal to either “openDel” or “closeDel”. . The method first initializes an empty ArrayList of strings called “d”. It then iterates through each string “str” in the “tokens” array using a for-each loop. For each “str” string, it checks whether it is equal to “openDel” or “closeDel” using the equals() method. If “str” is equal to either of these strings, it adds it to the “d” ArrayList using the add() method. . Finally, after iterating through all the strings in the “tokens” array, the method returns the “d” ArrayList containing only the strings that are equal to either “openDel” or “closeDel”. . Note that the values of “openDel” and “closeDel” are not defined in the code snippet provided, so their values are unknown. . b. . public boolean isBalanced(ArrayList &lt; String &gt; delimiters) { int openCount = 0; int closeCount = 0; for (String str: delimiters) { if (str.equals(openDel)) { openCount++; } else { closeCount++; } if (closeCount &gt; openCount) { return false; } } if (openCount == closeCount) { return true; } else { return false; } } . The code above is a Java method that takes an ArrayList of strings called “delimiters” as input and checks whether the input contains balanced delimiters. The method first initializes two integer variables, “openCount” and “closeCount”, to 0. It then iterates through each string “str” in the “delimiters” ArrayList using a for-each loop. For each “str” string, it checks whether it is equal to “openDel” using the equals() method. If “str” is equal to “openDel”, it increments the “openCount” variable. Otherwise, it increments the “closeCount” variable. At each iteration, the method checks whether the number of closing delimiters is greater than the number of opening delimiters. If this is the case, it means that the input is unbalanced, and the method immediately returns false. After iterating through all the strings in the “delimiters” ArrayList, the method checks whether the “openCount” variable is equal to the “closeCount” variable. If they are equal, it means that the input contains balanced delimiters, and the method returns true. Otherwise, it means that the input is unbalanced, and the method returns false. Note that the value of “openDel” is not defined in the code snippet provided, so its value is unknown. Additionally, this implementation assumes that all other strings in the “delimiters” ArrayList are closing delimiters, which may not always be the case. .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2023/03/12/Hacks-Week-1.html",
            "relUrl": "/markdown/2023/03/12/Hacks-Week-1.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Binary Seed Hack",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Binary Addition” ] }, { “cell_type”: “code”, “execution_count”: 9, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “1 + 1 = 10 n” ] } ], “source”: [ “public class BinaryAdd { n”, “ public static void main(String[] args) n”, “ { n”, “ String num1 = &quot;1&quot;; n”, “ String num2 = &quot;1&quot;; n”, “ n”, “ int number1 = Integer.parseInt(num1, 2); n”, “ int number2 = Integer.parseInt(num2, 2); n”, “ n”, “ int sum = number1 + number2; n”, “ System.out.println(num1 + &quot; + &quot; + num2 + &quot; = &quot; + Integer.toBinaryString(sum)); n”, “ n”, “ } n”, “} n”, “BinaryAdd.main(null);” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “1 + 1 = 10 n” ] } ], “source”: [ “public class Binary { n”, “ public static void main(String[] args) n”, “ { n”, “ int i = 0, carry = 0; n”, “ n”, “ int[] sum = new int[10]; n”, “ n”, “ n”, “ int b1 = 1; n”, “ int b2 = 1; n”, “ n”, “ while (b1 != 0 || b2 != 0) n”, “ { n”, “ sum[i++] = (int)((b1 % 10 + b2 % 10 + carry) % 2); n”, “ carry = (int)((b1 % 10 + b2 % 10 + carry) / 2); n”, “ b1 = b1 / 10; n”, “ b2 = b2 / 10; n”, “ } n”, “ if (carry != 0) { n”, “ sum[i++] = carry; n”, “ } n”, “ –i; n”, “ System.out.print(&quot;1 + 1 = &quot;); n”, “ while (i &gt;= 0) { n”, “ System.out.print(sum[i–]); n”, “ } n”, “ System.out.print(&quot; n&quot;); n”, “ } n”, “} n”, “Binary.main(null); n” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “Java”, “language”: “java”, “name”: “java” }, “language_info”: { “codemirror_mode”: “java”, “file_extension”: “.jshell”, “mimetype”: “text/x-java-source”, “name”: “java”, “pygments_lexer”: “java”, “version”: “18.0.2+0” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2023/03/06/Binary-Seed-Hack.ipynb",
            "relUrl": "/2023/03/06/Binary-Seed-Hack.ipynb",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "52 Question Test Corrections",
            "content": "Question 5 . . I got this question wrong because I didn’t notice that the rows and columns were initizalized to the wrong values to return these values. If row was set to 0 it would work. | Answer E is correct because it acknowledges that the initial row it set to 1 which meants that the first row is not printed. | I can watch 8.2 daily videos 1-3 to learn this concept. | . Question 24 . . I got this problem wrong because I didn’t realize that the substring would not be out of bounds since rep will stop at length - 1 and therefore doing a substring until rep+2 would just pring out the last letter. | Answer C is correct because it follows the pattern correctly. | I can watch 2.7 and 4.2 daily videos 1-3 to learn this concept. | . Question 25 . . I got this wrong because I didn’t realize that the List would not actually be changed since the remove statement occurs after. | Answer B is correct because it shows that the list never actually changes after the code snippet. | I can watch 2.7 daily videos 1-3 and 7.4 daily video 2 to learn this concept. | . Question 52 . . I got this question wrong because I did not follow the logic properly and got confused in the second nested loop. | Answer E is correct because it methodically walks through the second nested loop and fills in all the X’s in the right locations. | I can watch 8.2 videos 1-3 to learn this concept. | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2023/01/30/Test-Correction-52-Qs.html",
            "relUrl": "/markdown/2023/01/30/Test-Correction-52-Qs.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "66 Question Test Corrections",
            "content": "Question 2 . . I got this question wrong because I didn’t read the answer choice properly. I did not notice that it had a -1 attached to the animals.length and ignored the rest of the options. | Answer A is correct because the loop must iterate through the entire list and stop when the index i is equal to the length of the list, since indexes start from 0. | I can watch 6.2 daily videos 1-3 to learn this concept. | . Question 7 . . I got this problem wrong because I didn’t notice that a1 could not be accessed outside its class due to the private keyword. Furthermore, i neglected that inheritance allowed methodA to be accessed in class B. | Answer D is correct because methodB can’t be used in the parent class in which it doesn’t exist. Furthermore, a1 can’t be accessed in class B. | I can watch 9.3 daily videos 1 and 2 to learn this concept. | . Question 16 . . I got this wrong because I didn’t realize that the original snippet was iterating through the number of columns in line 5. I assumed that it was iterating for rows and therefore needed to be changed to arr.length. | Answer C is correct because row can only be iterated through an array, not a column. | I can watch 8.2 daily vides 1-3 to learn this concept. | . Question 18 . . This answer is incorrect because I didn’t read and interpret the boolean values properly in the code snippet. I should have used sample values to see if the same result was achieved. | Answer E is correct because it recognizes that the opposite of the given expression would print cat and uses that in the if condition. | I can watch 3.6 videos 1 and 2 to learn this concept. | . Question 19 . . This answer is incorrect because I once again did not take the time to evalulate the booleans myself with sample values. I also did not think to apply deMorgans law. | Answer A is correct because it utilizes deMorgans law. | I can watch 3.6 videos 1 and 2 to learn this concept. | . Question 20 . . I got this question wrong because I did not notice the difference between &lt; and &lt;=. Furthermore, i didn’t notice that one of the snippets prints even numbers. | Answer E is correct because the original snippet only prints odd numbers up till 7. While this loops k limit has been changed to 8, it has no impact since k is incremented by 2 and therefore prints the same. | I can watch 4.2 daily videos 1-3 to learn this concept. | . Question 24 . . I got this question wrong because I did not realize that the &lt;= in the first for loop would result in the loop going to an index that did not exist if a 0 was not found. The only array in which this applies was D. | Option D is correct because it was the only array in which there was no 0, meaning the loop would have continued past arr.length-1 to a nonexistent index. | I can watch 8.2 daily videos 1-3 to learn this concept. | . Question 32 . . I got this wrong because I did not realize that the option i select would result in the count being reset to 0 before being compared to the previous count. | Option E is correct because it allows for the count to be compared to the max and then reset to avoid overcounting. | I can watch 6.4 daily videos 1-3 to learn this concept. | . Question 36 . . I got this wrong because I did not know the answer. | Option C is correct. | I can watch 9.6 daily videos 1-3 to learn this concept. | . Question 47 . . I got this wrong because I did not remember the function of println properly and thought it would print the current statement on a new line. | Option C is correct because it would create a new line after “two” | I can watch 1.1 daily videos 1-3 to learn this concept. | . Question 52 . . I got this wrong because I didn’t realize that the return was not specified. Furthermore void methods have no return. | Option B is correct because a void method should not return anything. Therefore it should modify price but not return a value. | I can watch 5.5 videos 1 and 2 to learn this concept. s | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2023/01/21/Test-Corrections-66-Qs.html",
            "relUrl": "/markdown/2023/01/21/Test-Corrections-66-Qs.html",
            "date": " • Jan 21, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 9 HW Team 3 - Sanjay, Karthik, Evan, Pranav, Jay ()",
            "content": "public class Country { protected String countryName; protected double countryType; protected double countryLocation; protected double GDP; // Constructor for the attributes present in the superclass public Country(String countryName, double countryType, double countryLocation, double GDP) { this.countryName = countryName; this.countryType = countryType; this.countryLocation = countryLocation; this.GDP = GDP; } public void name () { System.out.println(&quot;Country: America&quot;); } public void type () { System.out.println(&quot;Type: Advanced&quot;); } public void size () { System.out.println(&quot;Size: Huge&quot;); } public void location () { System.out.println(&quot;Continent: North America&quot;); } public void GDP () { System.out.print(&quot;Money: Rich&quot;); } } public class America extends Country { // Additional attribute not present in the superclass protected String GDPtype; // Constructor for Subclass public America(String countryName, double countryType, double countryLocation, double GDP, String GDPtype) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(countryName, countryType, countryLocation, GDP); // hornSound is not in the Superclass, so we add it separately in the constructor this.GDPtype = GDPtype; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void size () { System.out.println(&quot;3.797 Million Miles^2 &quot;); } public void location () { System.out.println(&quot;Between Canada and Mexico&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void GDP () { super.GDP(); System.out.println(GDPtype); } public static void main(String[] args) { // 5 argument constructor America modelS = new America(&quot;Tesla&quot;, 396, 4, 200, &quot;Asf&quot;); // Example of late binding Country country = new America(&quot;Tesla&quot;, 396, 4, 200, &quot;Asf&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.name(); // Using the overridden method modelS.size(); modelS.type(); modelS.location(); // Using the method we added on to modelS.GDP(); country.GDP(); } } America.main(null); public class Acountry extends Country { public Acountry (String countryName, double countryType, double countryLocation, double GDP) { super(countryName, countryType, countryLocation, GDP); } @Override public void size () { System.out.println(&quot;The Fourth Largest Country!&quot;); } public void dimensions (int a) { System.out.println(&quot;Length is &quot; + a); } public void dimensions (int a, int b) { System.out.println(&quot;Length is &quot; + a + &quot; and height is &quot; + b); } public static void main(String[] args) { // 4 superclass argument constructor Acountry country2 = new Acountry(&quot;Apple&quot;, 348, 4, 145); // Using the overridden method country2.size(); // Using the overloaded method country2.dimensions(3000); country2.dimensions(3000, 6100); } } Acountry.main(null); .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/12/13/Unit-9-Hacks.html",
            "relUrl": "/2022/12/13/Unit-9-Hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "12/13 Extra Credit",
            "content": "Kathyleen Beveridge Talk . arrived from vietnam in 1980 | SCU Finance degree | USC MBA | Switched to high tech from brokerage | Works at Thermo Fisher scientific equiptment | 125k employees | 42B revenue | . | Background HP | qualcomn | . | . Kris Porter Talk . devops | UCLA electrical engineering first cs class at ucla | failed first time, C second time | . | Started email marketing operations | NBC | Twitter for past 2 years | many projects streaming infrastructure | twitter | . | . Reflection . tech industry has variety of roles not just coding | managing | . | tech can and should benefit people | CS is very important and affects many people | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/12/13/ExtraCredit-Lecture.html",
            "relUrl": "/markdown/2022/12/13/ExtraCredit-Lecture.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Vocab Part 1",
            "content": "Casting - Unit 1 (Primitives) . Below, there are two examples of casting. Both examples convert a double data type to integer via truncation. 1.511 is outputted as 1 in the first line. 28.2 is printed as 28 in the second line. This can simplify the output and make it easier to operate on in future code as well. . double d1 = 6.53; double d2 = 4.32; // Casting for division int dd = (int) (d1/d2); // Casting for multiplication int md = (int) (d1*d2); System.out.println(dd); // output of division, is integer System.out.println(md); // output of multiplication, is integer . 1 28 . Wrapper Classes (Unit 1: Primitives) . Wrapper class allow the use of primitive data types like integers as classes, and therefore use methods and code that otherwise would not be allowed. Below, the toString method can not be used with the primitive, but works with the wrapper. . int i = 1; Integer ii = 1; // String unwrapped = i.toString(); String wrapped = ii.toString(); System.out.println(i); System.out.println(ii); . 1 1 . Concatenation (Unit 1) . Concatenation is combinining two or more strings. . String s1 = &quot;hello&quot;; String s2 = &quot;world&quot;; String conc = s1.concat(s2); System.out.println(s1+ &quot; &quot; + s2); System.out.println(conc); System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + 12); . hello world helloworld hello world 12 . Math Class (Unit 2) . Allows math operations. Absolute value and random. . int ex = -1; System.out.println(Math.abs(-1)); // random between 1 and 10 System.out.println((int)(Math.random() * (100-10) + 10)); System.out.println((Math.random() * (10-1) + 1)); . 1 63 9.451016811188545 . Compound Boolean Expression (Unit 3) . Compound boolean expressions are when multiple boolean expressions are nested within each other. . boolean a = true; boolean b = false; System.out.println(!a &amp;&amp; !b); . false . Truth Tables (Unit 3) . Help visualize compound boolean expressions and make it easier to evaluate. . DeMorgans Law (Unit 3) . Make boolean expressions easier. . boolean a = true; boolean b = false; System.out.println(!(a&amp;&amp;b)); System.out.println(!a || !b); System.out.println(!(a||b)); System.out.println(!a &amp;&amp; !b); . true true false false .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/12/01/vocab.html",
            "relUrl": "/2022/12/01/vocab.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Vocab Part 4",
            "content": "Subclass constructor, super Keyword (Unit 9) . Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. | . public class Superclass { public void printMethod() { System.out.println(&quot;Printed in Superclass.&quot;); } } public class Subclass extends Superclass { // overrides printMethod in Superclass public void printMethod() { super.printMethod(); System.out.println(&quot;Printed in Subclass&quot;); } public static void main(String[] args) { Subclass s = new Subclass(); s.printMethod(); } } Subclass.main(null); . Printed in Superclass. Printed in Subclass . Overloading a method, same name different parameters (Unit 2) . In Java, two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading. | . // Overloading by changing the number of parameters class MethodOverloading { private static void display(int a){ System.out.println(&quot;Arguments: &quot; + a); } private static void display(int a, int b){ System.out.println(&quot;Arguments: &quot; + a + &quot; and &quot; + b); } public static void main(String[] args) { display(1); display(1, 4); } } MethodOverloading.main(null); . Arguments: 1 Arguments: 1 and 4 . Overriding a method, same signature of a method (Unit 10) . Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. | . // method overriding in java // Base Class class Parent { void show() { System.out.println(&quot;Parent&#39;s show()&quot;); } } // Inherited class class Child extends Parent { // This method overrides show() of Parent @Override void show() { System.out.println(&quot;Child&#39;s show()&quot;); } } // Driver class class Main { public static void main(String[] args) { // If a Parent type reference refers // to a Parent object, then Parent&#39;s // show is called Parent obj1 = new Parent(); obj1.show(); // If a Parent type reference refers // to a Child object Child&#39;s show() // is called. This is called RUN TIME // POLYMORPHISM. Parent obj2 = new Child(); obj2.show(); } } Main.main(null); . Parent&#39;s show() Child&#39;s show() . Abstract Class, Abstract Method (Unit 11) . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). | Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from). | . //An abstract class can have both abstract and regular methods: abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } } . Standard methods: (Unit 2) . toString(): Used to convert an object into a string. | equals(): Useful for comparing two objects to see if they are equal | hashCode(): Useful for getting a unique hash code for an object. | . class toString { public static void main( String args[] ) { //Creating an integer of value 10 Integer number=10; // Calling the toString() method as a function of the Integer variable System.out.println( number.toString() ); } } toString.main(null) . 10 . String myStr1 = &quot;Karthik&quot;; String myStr2 = &quot;Evan&quot;; String myStr3 = &quot;Pranav&quot;; String myStr4 = &quot;Sanjay&quot;; String myStr5 = &quot;Jay&quot;; String myStr6 = &quot;Karthik&quot;; System.out.println(myStr1.equals(myStr6)); // Returns true because they are equal System.out.println(myStr1.equals(myStr4)); // false . true false . /* * Program Demonstrate hashcode() method of Method Class. */ import java.lang.reflect.Method; public class hashCode { // create a Method name getSampleMethod public void getSampleMethod() {} // create main method public static void main(String args[]) { try { // create class object for class name hashCode Class c = hashCode.class; // get Method object of method name getSampleMethod Method method = c.getDeclaredMethod(&quot;getSampleMethod&quot;, null); // get hashcode of method object using hashCode() method int hashCode = method.hashCode(); // Print hashCode with method name System.out.println(&quot;hashCode of method &quot; + method.getName() + &quot; is &quot; + hashCode); } catch (Exception e) { // print if any exception occurs e.printStackTrace(); } } } hashCode.main(null) . hashCode of method getSampleMethod is 49965842 . Late binding of object, referencing superclass object (Unit 10) . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. | . public class lateBinding { public static class superclass { void print() { System.out.println(&quot;print in superclass.&quot;); } } public static class subclass extends superclass { @Override void print() { System.out.println(&quot;print in subclass.&quot;); } } public static void main(String[] args) { superclass A = new superclass(); superclass B = new subclass(); A.print(); B.print(); } } lateBinding.main(null) . print in superclass. print in subclass. . Polymorphism: any of overloading, overriding, late binding (Unit 9) . Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters. | . abstract class Animal { public void distanceDriven() { System.out.println(&quot;Anima has walked 120 feet&quot;); } } class Dog extends Animal { public void distanceDriven() { System.out.println(&quot;The SUV has driven 70 feet&quot;); } } class Cat extends Animal { public void distanceDriven() { System.out.println(&quot;The truck has driven 60 feet&quot;); } } // Instantiating the Car class would throw an error as it is abstract Dog dog = new Dog(); Cat cat = new Cat(); dog.distanceDriven(); cat.distanceDriven(); . The SUV has driven 70 feet The truck has driven 60 feet . Big O notation for Hash map, Binary Search, Single loop, Nested Loop (Unit 2) . Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. | . class Main { public static void main(String[] args) { int a = 0, b = 0; int N = 4, M = 4; // This loop runs for N time for (int i = 0; i &lt; N; i++) { a = a + 10; } // This loop runs for M time for (int i = 0; i &lt; M; i++) { b = b + 40; } System.out.print(a + &quot; &quot; + b); } } Main.main(null) . 40 160 .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/12/01/Vocab-Part-4-Code-Example.html",
            "relUrl": "/2022/12/01/Vocab-Part-4-Code-Example.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Vocab Part 3",
            "content": "- Accessor Methods (Unit 5) . A method called an accessor retrieves confidential information that is kept inside an object. An accessor offers a way for other program elements to access an object&#39;s state. . class Student { //Instance variable name private String name; /** getName() example * @return name */ public String getName() { return name; } public static void main(String[] args) { // To call a get method, use objectName.getVarName() Student s = new Student(); System.out.println(&quot;Name: MasterCoder &quot; + s.getName() ); } } Student.main(null) . Name: MasterCoder null . - Mutator Methods (Unit 5) . A technique used to regulate changes to a variable is known as a mutator method. They&#39;re also frequently referred to as setter methods. A getter, often referred to as an accessor, frequently follows a setter and returns the value of the private member variable. . import java.math.BigDecimal; public class Product { private BigDecimal price; private String name; public BigDecimal getPrice() { return price; } public String getName() { return name; } // mutator or setter methods public void setPrice(BigDecimal price) { if(price.compareTo(BigDecimal.ZERO)&lt;0 )throw new IllegalArgumentException(&quot;Empty product name&quot;); this.price = price; } public void setName(String name) { if(name.isEmpty()) throw new IllegalArgumentException(&quot;Empty product name&quot;); this.name = name; } } . - Static, Class Variables (Unit 5) . All instances of a class share static variables, which are variables. This implies that no matter how many instances of the same class of objects you create, changing a static variable or method will update it for all of them. This is helpful if you want to increment a counter for each instance of a class, for example. . class VariableDemo { static int count=0; public void increment() { count++; } public static void main(String args[]) { VariableDemo obj1=new VariableDemo(); VariableDemo obj2=new VariableDemo(); obj1.increment(); obj2.increment(); System.out.println(&quot;Obj1: count is=&quot;+obj1.count); System.out.println(&quot;Obj2: count is=&quot;+obj2.count); } } VariableDemo.main(null) . Obj1: count is=2 Obj2: count is=2 . public class VariableExample{ int myVariable; static int data = 30; public static void main(String args[]){ int a = 100; VariableExample obj = new VariableExample(); System.out.println(&quot;Value of instance variable myVariable: &quot;+obj.myVariable); System.out.println(&quot;Value of static variable data: &quot;+VariableExample.data); System.out.println(&quot;Value of local variable a: &quot;+a); } } VariableExample.main(null) . Value of instance variable myVariable: 0 Value of static variable data: 30 Value of local variable a: 100 . - Public, Private, Protected (Unit 4) . public: available to everyone. protected: open to subclasses in any package as well as classes belonging to the same package. default, indicating that no modifiers are specified: accessible by classes belonging to the same package. private: only available to members of the same class. . public class Addition { public int addTwoNumbers(int a, int b){ return a+b; } } class Test{ public static void main(String args[]){ Addition obj = new Addition(); System.out.println(obj.addTwoNumbers(100, 1)); } } Test.main(null) . 101 . class Data { private String name; // getter method public String getName() { return this.name; } // setter method public void setName(String name) { this.name= name; } } public class Main { public static void main(String[] main){ Data d = new Data(); // access the private variable using the getter and setter d.setName(&quot;Mortensen&quot;); System.out.println(d.getName()); } } Main.main(null) . Mortensen . public class Addition { protected int addTwoNumbers(int a, int b){ return a+b; } } class Test extends Addition{ public static void main(String args[]){ Test obj = new Test(); System.out.println(obj.addTwoNumbers(11, 22)); } } . - Static, Class Methods (Unit 2) . A static method is a method that is declared as a member of an object but can only be accessed from the constructor of an API object rather than from an instance of the object generated by the constructor. Class methods, on the other hand, are methods that are invoked on the class as a whole rather than on a single object instance. As a result, it falls under the class level, and the class method is shared by all class instances. A class method is linked to the class itself, not to any class objects. Only class variables are accessible to it. . public class StaticExample { public static int x; public static void main(String[] args) { x += 7; System.out.println(&quot;Add 7. Result: &quot; + x); } } StaticExample se = new StaticExample(); se.main(null); . Add 7. Result: 7 . - &quot;this Keyword&quot; (Unit 5) . In a method or constructor, the &quot;this keyword&quot; refers to the current object. As a class attribute is shadowed by a method or constructor argument, the this keyword is most frequently used to clarify the differences between class attributes and parameters with the same name. . class A{ A(){ this(5); System.out.println(&quot;hello world&quot;); } A(int x){ System.out.println(x); } } class TestThis6{ public static void main(String args[]){ A a=new A(); }} . - &quot;main method&quot; (Unit 2) . As the starting point for running a Java program, the main method in Java is typically the first method you encounter when learning how to program in Java. The main method can be located in any class that is a part of a program and can contain code to run or call other methods. . // Extends static example and modifies x value public class ExtendsExample extends StaticExample { public static void main(String[] args) { x += 10232; System.out.println(&quot;Add 10232. Result: &quot; + x); } } ExtendsExample ee = new ExtendsExample(); ee.main(null); . Add 10232. Result: 10239 . - Inherticance, Extends (Unit 9) . It can inherit properties and methods from the class it is extending by using an extends method. When you want to alter or add to an existing class without having to completely rewrite the code for the class you are extending, this is helpful. . public class Cat extends Animal{ private String color; public Cat(boolean veg, String food, int legs) { super(veg, food, legs); this.color=&quot;White&quot;; } public Cat(boolean veg, String food, int legs, String color){ super(veg, food, legs); this.color=color; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } public class AnimalInheritanceTest { public static void main(String[] args) { Cat cat = new Cat(false, &quot;milk&quot;, 4, &quot;black&quot;); System.out.println(&quot;Cat is Vegetarian?&quot; + cat.isVegetarian()); System.out.println(&quot;Cat color is &quot; + cat.getColor()); } } AnimalInheritanceTest.main(null) . Cat is Vegetarian?false Cat color is black .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/12/01/Vocab-Part-3.html",
            "relUrl": "/homework/2022/12/01/Vocab-Part-3.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 3 Focus/Habits",
            "content": "Short and Long Term Goals . Bench 200 | Learn more in areas of interest | Get good grades in school | Get a successful job | Develop better work ethic | develop better focus and study habits | maintain a happy mindset | . Psychology and the Good Life Notes . college isn’t just like admissions packet | Students feel unfulfilled and stressed | anxiety is dominant | stress takes a toll | college students have more than the average amount of stress | stress affects future workers | college students have a high amount of loneliness | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/11/09/Focus-and-Habits.html",
            "relUrl": "/markdown/2022/11/09/Focus-and-Habits.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Finals Week Test Corrections",
            "content": "Question 4 . . I got this question wrong because I didn’t read the code snipped properly. I thought it said y&gt;0 and thus assumed that it would evaluate to true and print 3*7 = 21. | Answer C is correct because the condition states (x&lt;10 and y&lt;0). Since y is 3 and not less than 0, the else condition evaluates printing 7/3 which comes out to 2. | I can watch 3.5 daily videos 1-3 to learn this concept. | . Question 12 . . I misinterpreted the code snippet and didn’t notice that incrementing k by two would result in letters being skipped. | Answer C is correct the value of k starts at 1 and is incremented by 2 each time around. This means that k will be 1,3,5,7, and 9 over the loop. This means that every other letter is outputted resulting in optr. | I can watch 2.7 and 4.3 daily videos to learn this concept. | . Question 13 . . This answer is incorrect because the code outputs k and not arr[k]. Therefore it is the index that is printed and not the value of the list at that index. | Answer B is corrected because it is the index that is printed whenever a value is greater than the following value. Therefore, the output must start as 0 because that is the index. | I can watch 6.4 daily vides 1-3 to learn this concept. | . Question 21 . . This answer is incorrect due to the type of for loop. I did not notice the prescence of an enhanced for loop. Therefore, num is not an index but an actual value in the list. subtracting val from row[num] would not be accurate because num is not an index. | Answer D is correct because it recognizes that num is a value in the list so all that must be done is subtract val from num. | I can watch 2.9 and 8.2 videos 1-3 to learn this concept. | . Question 23 . . I got this question wrong because I couldn’t comprehend the complex code and figure out what function it was accomplishing. | Answer B is correct because the elements that start with B are being appended the opposite side of the list. | I can watch 2.7 videos 1-3 as well as 7.4 video 1 to learn this concept. | . Question 34 . . I got this question wrong because I did not realize that x and y were private variables and thus cannot be accessed the way they are being accessed in option 3. Therefore, option 3 is not valid. | Answer B is correct because 2 is the only valid option. The center and radius are defined by (a,b), while options 1 and 3 do not work. | I can watch 5.2 daily videos 1-3 to learn this concept. | . Question 39 . . I got this wrong because I did not read code properly. I did not notice that it was recur(recur(x)) and therefore thought the code ended after one run and returned 18. | Option D is correct because recur is repeated until recur(n) is a value under 10. This occurs when n=8 and n*2 = 16 is returned. | I can watch 10.1 videos 1 and 2 to learn this concept. | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/11/08/test-corrections.html",
            "relUrl": "/markdown/2022/11/08/test-corrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Title",
            "content": "import java.util.*; . public class GradeCalculator { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Is the final in the tests category (true/false)?&quot;); boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;What is your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;How many points is in the tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;How many points is the final?&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double desiredGrade = sc.nextDouble(); double percentNeeded = desiredGrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentNeeded/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); //wrapper class System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentNeeded = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentNeeded/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/11/08/Unit1-HW.html",
            "relUrl": "/2022/11/08/Unit1-HW.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 7 2018 HW",
            "content": "2. This question involves reasoning about pairs of words that are represented by the following . public class WordPair . { . /* Constructs a WordPair object. / . public WordPair(String first, String second) . { / implementation not shown / } . /* Returns the first string of this WordPair object. / . public String getFirst() . { / implementation not shown / } . /* Returns the second string of this WordPair object. / . public String getSecond() . { / implementation not shown / } . } . WordPair class. . 2. You will implement the constructor and another method for the following WordPairList class. . public class WordPairList . { . /* The list of word pairs, initialized by the constructor. / . private ArrayList allPairs;&lt;/p&gt; /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 . */ . public WordPairList(String[] words) . { / to be implemented in part (a) / } . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . { / to be implemented in part (b) / } . } . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (a) Write the constructor for the WordPairList class. The constructor takes an array of strings words as . a parameter and initializes the instance variable allPairs to an ArrayList of WordPair objects. A WordPair object consists of a word from the array paired with a word that appears later in the array. The allPairs list contains WordPair objects (words[i], words[j]) for every i and j, where 0 £ i &lt; j &lt; words.length . Each WordPair object is added exactly once to the list. The following examples illustrate two different WordPairList objects. . . Complete the WordPairList constructor below. . /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 */ public WordPairList(String[] words) | . public class WordPairList { public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for(int i = 0; i &lt; words.length; i++) for(int j = i + 1; j &lt; words.length; j++) allPairs.add(new WordPair(words[i], words[j])); } } . (2b) . Write the WordPairList method numMatches. This method returns the number of WordPair objects in allPairs for which the two strings match. For example, the following code segment creates a WordPairList object. . String[] moreWords = {&quot;the&quot;, &quot;red&quot;, &quot;fox&quot;, &quot;the&quot;, &quot;red&quot;}; . WordPairList exampleThree = new WordPairList(moreWords); . After the code segment has executed, the allPairs instance variable of exampleThree will contain the following WordPair objects in some order. The pairs in which the first string matches the second string are shaded for illustration. . (&quot;the&quot;, &quot;red&quot;), (&quot;the&quot;, &quot;fox&quot;), (&quot;the&quot;, &quot;the&quot;), . (&quot;the&quot;, &quot;red&quot;), (&quot;red&quot;, &quot;fox&quot;), (&quot;red&quot;, &quot;the&quot;), . (&quot;red&quot;, &quot;red&quot;), (&quot;fox&quot;, &quot;the&quot;), (&quot;fox&quot;, &quot;red&quot;), . (&quot;the&quot;, &quot;red&quot;) . The call exampleThree.numMatches() should return 2. . . Complete method numMatches below. . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . public int numMatches() { int matches = 0; for(WordPair wp : allPairs) if(wp.getFirst().equals(wp.getSecond())) matches++; return matches; } . &lt;/div&gt; .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/27/Unit-7-HW.html",
            "relUrl": "/homework/2022/10/27/Unit-7-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 6 Homework",
            "content": "Hack 1 . How do we access the even numbers in arrayOne from above? . import java.util.Arrays; int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i&lt;arrayOne.length;i++) { if (arrayOne[i] % 2 == 0) { System.out.println(arrayOne[i] + &quot; &quot;); } } . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . B . APCSA 2021 Question 3 . A high school club maintains information about its members in a MemberInfo object. A MemberInfo object stores a club member’s name, year of graduation, and whether or not the club member is in good standing. A member who is in good standing has fulfilled all the responsibilities of club membership. . A partial declaration of the MemberInfo class is shown below. . public class MemberInfo { / Constructs a MemberInfo object for the club member with name name, graduation year gradYear, and standing hasGoodStanding. / public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { / implementation not shown */ } / Returns the graduation year of the club member. / public int getGradYear() { / implementation not shown / } /** Returns true if the member is in good standing and false otherwise. / public boolean inGoodStanding() { / implementation not shown / } // There may be instance variables, constructors, and methods that are not shown. } | . | The ClubMembers class maintains a list of current club members. The declaration of the ClubMembers class is shown below. . public class ClubMembers { private ArrayList memberList; / Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array. / public void addMembers(String[] names, int gradYear) { / to be implemented in part (a) */ } / Removes members who have graduated and returns a list of members who have graduated and are in good standing, as described in part (b). / public ArrayList removeMembers(int year) { /&lt;/em&gt; to be implemented in part (b) */ } // There may be instance variables, constructors, and methods that are not shown. } &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (A) . Write the ClubMembers method addMembers, which takes two parameters. The first parameter is a String array containing the names of new club members to be added. The second parameter is the graduation year of all the new club members. The method adds the new members to the memberList instance variable. The names can be added in any order. All members added are initially in good standing and share the same graduation year, gradYear. . Complete the addMembers method. . /* Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array./ . public void addMembers(String[] names, int gradYear) . public void addMembers(String[] names, int gradYear) { for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . &lt;/div&gt; | . | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/25/Unit-6-HW.html",
            "relUrl": "/homework/2022/10/25/Unit-6-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 5 2019 FRQ Q2",
            "content": "2. . This question involves the implementation of a fitness tracking system that is represented by the StepTracker class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. The StepTracker class provides a constructor and the following methods. . addDailySteps, which accumulates information about steps, in readings taken once per day | activeDays, which returns the number of active days | averageSteps, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked | . The following table contains a sample code execution sequence and the corresponding results. . . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { private final int minStepsActive; private int activeDays; private int days; private int totalSteps; public StepTracker(int minStepsActive) { this.minStepsActive = minStepsActive; activeDays = 0; days = 0; totalSteps = 0; } public void addDailySteps(int steps) { if(steps &gt;= minStepsActive) activeDays++; days++; totalSteps += steps; } public int activeDays() { return activeDays; } public double averageSteps() { if(days == 0) return 0; return totalSteps / (double) days; } } .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/25/Unit-5-FRQ.html",
            "relUrl": "/homework/2022/10/25/Unit-5-FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 4 Homework",
            "content": "// import required classes and package, if any import java.util.Scanner; // create class CaesarCipherExample for encryption and decryption public class CaesarCipherExample { // ALPHABET string denotes alphabet from a-z public static final String ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;; // create encryptData() method for encrypting user input string with given shift key public static String encryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // encryptStr to store encrypted data String encryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get encrypted char for each char of inputStr int encryptPos = (shiftKey + pos) % 26; char encryptChar = ALPHABET.charAt(encryptPos); // add encrypted char to encrypted string encryptStr += encryptChar; } // return encrypted string return encryptStr; } // create decryptData() method for decrypting user input string with given shift key public static String decryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // decryptStr to store decrypted data String decryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get decrypted char for each char of inputStr int decryptPos = (pos - shiftKey) % 26; // if decryptPos is negative if (decryptPos &lt; 0){ decryptPos = ALPHABET.length() + decryptPos; } char decryptChar = ALPHABET.charAt(decryptPos); // add decrypted char to decrypted string decryptStr += decryptChar; } // return decrypted string return decryptStr; } // main() method start public static void main(String[] args) { // create an instance of Scanner class Scanner sc = new Scanner(System.in); // take input from the user System.out.println(&quot;Enter a string for encryption using Caesar Cipher: &quot;); String inputStr = sc.nextLine(); System.out.println(&quot;Enter the value by which each character in the plaintext message gets shifted: &quot;); int shiftKey = Integer.valueOf(sc.nextLine()); System.out.println(&quot;Encrypted Data ===&gt; &quot;+encryptData(inputStr, shiftKey)); System.out.println(&quot;Decrypted Data ===&gt; &quot;+decryptData(encryptData(inputStr, shiftKey), shiftKey)); // close Scanner class object sc.close(); } } CaesarCipherExample.main(null) . Enter a string for encryption using Caesar Cipher: Enter the value by which each character in the plaintext message gets shifted: Encrypted Data ===&gt; nicecjobcccodeccodeccodecsupercalifragilisticexpialidocious Decrypted Data ===&gt; kfzbzglyzzzlabzzlabzzlabzprmbozxifcoxdfifpqfzbumfxifalzflrp .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "relUrl": "/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Java-Exercises",
            "content": "1. Write a Java program to get a number from the user and print whether it is positive or negative. . import java.util.Scanner; public class Exercise1 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int input = in.nextInt(); if (input &gt; 0) //boolean { System.out.println(&quot;Number is positive&quot;); } else if (input &lt; 0) { System.out.println(&quot;Number is negative&quot;); } else { System.out.println(&quot;Number is zero&quot;); } } } Exercise1.main(null); . Input number: Number is positive . 2. Write a Java program to solve quadratic equations (use if, else if and else). . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The equation has no real roots. . 3. Take three numbers from the user and print the greatest number. . import java.util.Scanner; public class Exercise3 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the 1st number: &quot;); int num1 = in.nextInt(); System.out.print(&quot;Input the 2nd number: &quot;); int num2 = in.nextInt(); System.out.print(&quot;Input the 3rd number: &quot;); int num3 = in.nextInt(); if (num1 &gt; num2) if (num1 &gt; num3) System.out.println(&quot;The greatest: &quot; + num1); if (num2 &gt; num1) if (num2 &gt; num3) System.out.println(&quot;The greatest: &quot; + num2); if (num3 &gt; num1) if (num3 &gt; num2) System.out.println(&quot;The greatest: &quot; + num3); } } Exercise3.main(null); . Input the 1st number: Input the 2nd number: Input the 3rd number: The greatest: 9 . 4.Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) // Math Function: Absolute Value { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 5. Write a Java program that keeps a number from the user and generates an integer between 1 and 7 and displays the name of the weekday. . import java.util.Scanner; public class Exercise5 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int day = in.nextInt(); System.out.println(getDayName(day)); } // Get the name for the Week public static String getDayName(int day) { String dayName = &quot;&quot;; switch (day) { case 1: dayName = &quot;Monday&quot;; break; case 2: dayName = &quot;Tuesday&quot;; break; case 3: dayName = &quot;Wednesday&quot;; break; case 4: dayName = &quot;Thursday&quot;; break; case 5: dayName = &quot;Friday&quot;; break; case 6: dayName = &quot;Saturday&quot;; break; case 7: dayName = &quot;Sunday&quot;; break; default:dayName = &quot;Invalid day range&quot;; } return dayName; } } Exercise5.main(null); . Input number: Wednesday . 6. Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); // wrapper classes: using methods System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 7. Write a Java program to find the number of days in a month. . import java.util.Scanner; public class Exercise7 { public static void main(String[] strings) { Scanner input = new Scanner(System.in); int number_Of_DaysInMonth = 0; String MonthOfName = &quot;Unknown&quot;; System.out.print(&quot;Input a month number: &quot;); int month = input.nextInt(); System.out.print(&quot;Input a year: &quot;); int year = input.nextInt(); switch (month) { case 1: MonthOfName = &quot;January&quot;; number_Of_DaysInMonth = 31; break; case 2: MonthOfName = &quot;February&quot;; if ((year % 400 == 0) || ((year % 4 == 0) &amp;&amp; (year % 100 != 0))) { number_Of_DaysInMonth = 29; } else { number_Of_DaysInMonth = 28; } break; case 3: MonthOfName = &quot;March&quot;; number_Of_DaysInMonth = 31; break; case 4: MonthOfName = &quot;April&quot;; number_Of_DaysInMonth = 30; break; case 5: MonthOfName = &quot;May&quot;; number_Of_DaysInMonth = 31; break; case 6: MonthOfName = &quot;June&quot;; number_Of_DaysInMonth = 30; break; case 7: MonthOfName = &quot;July&quot;; number_Of_DaysInMonth = 31; break; case 8: MonthOfName = &quot;August&quot;; number_Of_DaysInMonth = 31; break; case 9: MonthOfName = &quot;September&quot;; number_Of_DaysInMonth = 30; break; case 10: MonthOfName = &quot;October&quot;; number_Of_DaysInMonth = 31; break; case 11: MonthOfName = &quot;November&quot;; number_Of_DaysInMonth = 30; break; case 12: MonthOfName = &quot;December&quot;; number_Of_DaysInMonth = 31; } System.out.print(MonthOfName + &quot; &quot; + year + &quot; has &quot; + number_Of_DaysInMonth + &quot; days n&quot;); } } Exercise7.main(null); . Input a month number: Input a year: February 2019 has 28 days . 8. Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message. . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Error. Not a letter. Enter uppercase or lowercase letter. . 9. Write a Java program that takes a year from user and print whether that year is a leap year or not. . import java.util.Scanner; public class Exercise9 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the year: &quot;); int year = in.nextInt(); boolean x = (year % 4) == 0; boolean y = (year % 100) != 0; boolean z = ((year % 100 == 0) &amp;&amp; (year % 400 == 0)); if (x &amp;&amp; (y || z)) { System.out.println(year + &quot; is a leap year&quot;); } else { System.out.println(year + &quot; is not a leap year&quot;); } } } Exercise9.main(null); . Input the year: 42 is not a leap year . 10. Write a program in Java to display the first 10 natural numbers. . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 11. Write a program in Java to display n terms of natural numbers and their sum. . import java.util.Scanner; public class Exercise11 { public static void main(String[] args) { int i, n, sum=0; { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); n = in.nextInt(); } System.out.println(&quot;The first n natural numbers are : &quot;+n); for(i=1;i&lt;=n;i++) { System.out.println(i); sum+=i; } System.out.println(&quot;The Sum of Natural Number upto &quot;+n+ &quot; terms : &quot; +sum); } } Exercise11.main(null); . Input number: The first n natural numbers are : 48 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 The Sum of Natural Number upto 48 terms : 1176 . 12. Write a program in Java to input 5 numbers from keyboard and find their sum and average . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 26 The Average is : 5.0 . 13. Write a program in Java to display the cube of the number upto given an integer. . import java.util.Scanner; public class Exercise13 { public static void main(String[] args) { int i,n; System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { System.out.println(&quot;Number is : &quot; +i+&quot; and cube of &quot; +i+&quot; is : &quot;+(i*i*i)); } } } Exercise13.main(null); . Input number of terms : Number is : 1 and cube of 1 is : 1 Number is : 2 and cube of 2 is : 8 Number is : 3 and cube of 3 is : 27 Number is : 4 and cube of 4 is : 64 . 14. Write a program in Java to display the multiplication table of a given integer. . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 5 X 0 = 0 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 . 15. Write a program in Java to display the n terms of odd natural number and their sum. . import java.util.Scanner; public class Exercise15 { public static void main(String[] args) { int i,n,sum=0; System.out.print(&quot;Input number of terms is: &quot;); { Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; nThe odd numbers are :&quot;); for(i=1;i&lt;=n;i++) { System.out.println (2*i-1); sum+=2*i-1; } System.out.println (&quot;The Sum of odd Natural Number upto &quot; +n+&quot; terms is: &quot; +sum); } } } Exercise15.main(null); . Input number of terms is: The odd numbers are : 1 The Sum of odd Natural Number upto 1 terms is: 1 . 16. Write a program in Java to display the pattern like right angle triangle with a number. . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 1234567891011 123456789101112 12345678910111213 1234567891011121314 123456789101112131415 12345678910111213141516 1234567891011121314151617 123456789101112131415161718 12345678910111213141516171819 . 17. Write a program in Java to make such a pattern like right angle triangle with a number which will repeat a number in a row.The pattern is as follows : . import java.util.Scanner; public class Exercise17 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of n : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(i); System.out.println(&quot;&quot;); } } } Exercise17.main(null); . Input number of n : 1 22 333 4444 55555 666666 7777777 88888888 . 18. Write a program in Java to make such a pattern like right angle triangle with number increased by 1.The pattern like : . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 . 19. Write a program in Java to make such a pattern like a pyramid with a number which will repeat the number in the same row. . import java.util.Scanner; public class Exercise19 { public static void main(String[] args) { int i,j,n,s,x; System.out.print (&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); s=n+4-1; for(i=1;i&lt;=n;i++) { for(x=s;x!=0;x--) { System.out.print(&quot; &quot;); } for(j=1;j&lt;=i;j++) { System.out.print(i+&quot; &quot;); } System.out.println(); s--; } } } Exercise19.main(null); . Input number of rows : 1 2 2 3 3 3 4 4 4 4 . 20. Write a program in Java to print the Floyd&#39;s Triangle. . import java.util.Scanner; public class Main { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Main.main(null); . Input number of rows : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/25/Unit-3-JavaExercises.html",
            "relUrl": "/homework/2022/10/25/Unit-3-JavaExercises.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "APCSA 2019, Q1",
            "content": "1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition: The date represented by month, day, year is a valid date. / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . 1(a) . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2 inclusive. In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) | . public static int numberOfLeapYears(int year1, int year2) { int leapYears = 0; for(int y = year1; y &lt;= year2; y++) if(isLeapYear(y)) leapYears++; return leapYears; } . 1. . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . 1(b) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. | . public static int dayOfWeek(int month, int day, int year) . public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; if(weekday == 7) weekday = 0; } return weekday; } .",
            "url": "https://sanjayb06.github.io/tri1fastpages/homework/2022/10/25/Unit-3-2019FRQ.html",
            "relUrl": "/homework/2022/10/25/Unit-3-2019FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Fibonacci Notebook",
            "content": "import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . public class FiboWhileLoop extends Fibo { public FiboWhileLoop() { this(10); // telescope to avoid code duplication, using default } public FiboWhileLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboWhileLoop wFib = new FiboWhileLoop(5); // this is where you set the number (5 in this case) wFib.print(); } // Custom init using while loop instead protected void init() { this.name = &quot;While&quot;; int i = 0; // new long array with only 0 long[] f = new long[] {0,1}; //while i is less than the length desired while (i &lt; this.size) { // sets data first, then adds to f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; // adds to counter i++; } } } FiboWhileLoop.main(null) . Init method = While fibonacci Number 5 = 3 fibonacci List = [0, 1, 1, 2, 3] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] . public class FiboRecurLoop extends Fibo { public FiboRecurLoop() { this(10); // telescope to avoid code duplication, using default } public FiboRecurLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecurLoop rFib = new FiboRecurLoop(); rFib.print(); } // Recursion function, using int i as a counter protected void recur(long[] f, int i) { // Sets data using beginning value this.setData(f[0]); // Cretes new long f = new long[]{f[1], f[0] + f[1]}; // Adds to counter i++; if (i &lt; this.size) { // Recusion continues if size limit has not been reached this.recur(f, i); } } // Custom init using recursion loop instead protected void init() { this.name = &quot;Recursion&quot;; System.out.println(&quot;This is the recursion loop&quot;); // Uses int i as a counter for recusion, also creates initial long[] int i = 0; long[] f = new long[] {0,1}; // input long and counter i into recursion function this.recur(f, i); } } FiboRecurLoop.main(null) . This is the recursion loop This is the recursion loop Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . public class FiboForLoop extends Fibo { public FiboForLoop() { this(10); // telescope to avoid code duplication, using default } public FiboForLoop(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboForLoop fFib = new FiboForLoop(); fFib.print(); } // Custom init using for loop instead protected void init() { this.name = &quot;For&quot;; // creates initial long[] long[] f = new long[] {0,1}; // iterates through until reaches desired length for (int i = 0; i &lt; this.size; i++) { // sets data, then updates f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } FiboForLoop.main(null) . Init method = For fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/09/25/Java-Fibonacci.html",
            "relUrl": "/2022/09/25/Java-Fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 4 - FRQ 1",
            "content": "Hacks . Iteration minilab Completed | FRQ No 1 Completed | . Review Ticket . Iteration Notebook . Notebook Link . FRQ No 1 . FRQ No. 1 .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/09/19/Week-4-FRQ.html",
            "relUrl": "/markdown/2022/09/19/Week-4-FRQ.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "ASCII Array Art",
            "content": "import java.util.concurrent.ThreadLocalRandom; class carLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cars; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of cars */ public carLoop() { //Storing Data in 2D arrays cars = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //car 0 { &quot; ______&quot;, &quot; /|_||_ `.__&quot;, &quot;( _ _ _ &quot;, &quot;=`-(_)--(_)-&#39; &quot; }, //car 1 { &quot; ____&quot;, &quot; __/ |_ _&quot;, &quot;| _ _``-.&quot;, &quot;&#39;-(_)(_)--&#39;&quot; }, //car 2 { &quot; _.-.___ __&quot;, &quot;| _ _`-. &quot;, &quot;&#39;-(_)-(_)--`&quot; }, //car 3 { &quot; ____&quot;, &quot; ____//_]|________&quot;, &quot; (o _ | -| _ o| &quot;, &quot; `(_)-(_)--&#39;&quot; }, //car 4 { &quot; _____________&quot;, &quot; ____//__][__][___|&quot;, &quot;(o _| -| _ o|&quot;, &quot; `-(_)--(_)-&#39;&quot; }, }; } /** * Loop and print cars in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Car race poem&quot;); // cars (non-primitive) defined in constructor knows its length int carCount = cars.length; int i = carCount; while (i&gt;=1) //loops through 2D array length backwards { //this print statement shows current count of cars // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; Cars left in the race&quot;); for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each car part by part, will eventually print entire column*/ for (int col = 0; col &lt; cars[row].length; col++) { // prints specific part of the car from the column System.out.print(cars[row][col] + &quot; n&quot;); //this is new line between separate parts // System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing carCount variable by 1 int randomNum = ThreadLocalRandom.current().nextInt(1, carCount); carCount -= 1; i -= randomNum; } //out of all the loops, prints finishing messages System.out.println(&quot;WINNER&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new carLoop().printPoem(); //a new car list and output in one step } } carLoop.main(null); . Car race poem 5 Cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; ____ __/ |_ _ | _ _``-. &#39;-(_)(_)--&#39; _.-.___ __ | _ _`-. &#39;-(_)-(_)--` ____ ____//_]|________ (o _ | -| _ o| `(_)-(_)--&#39; _____________ ____//__][__][___| (o _| -| _ o| `-(_)--(_)-&#39; 4 Cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; ____ __/ |_ _ | _ _``-. &#39;-(_)(_)--&#39; _.-.___ __ | _ _`-. &#39;-(_)-(_)--` ____ ____//_]|________ (o _ | -| _ o| `(_)-(_)--&#39; 1 Cars left in the race ______ /|_||_ `.__ ( _ _ _ =`-(_)--(_)-&#39; WINNER 0000000000000000000000000000000000 THE END .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/09/19/Java-Ascii-art.html",
            "relUrl": "/2022/09/19/Java-Ascii-art.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "2007 FRQ No 1",
            "content": "/* * @param number the number to be tested * Precondition: number 0 &gt; * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copynum = number; while (number &gt; 0) { int digit = number % 10; // get last digit by getting remainder of division by 10 (int will eliminate decimal point) if (digit ==0 || copynum % digit != 0) { // if remainder of number and digit isnt 0, not divisble return false; // cant have 0, every digit must be divisible } number /= 10; // divide number by 10 for next iteration in order to get the next digit } return true; } // Testing method with different inputs System.out.println(&quot;Is 105 a self divisior? &quot; + isSelfDivisor(105)); // Testing number with 0 in it System.out.println(&quot;Is 143 a self divisior? &quot; + isSelfDivisor(143)); // Testing non self divisor System.out.println(&quot;Is 128 a self divisior? &quot; + isSelfDivisor(128)); // Testing given example of self divisor: 128 . Is -5 a self divisor? false Is 105 a self divisior? false Is 143 a self divisior? false Is 128 a self divisior? true . /* * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] sds = new int[num]; // starting empty list with lenght equal to num int total = 0; // keeps track of self divisors found while (total &lt; num) { if (isSelfDivisor(start)) { sds[total] = start; // adds selected number total ++; // incremements total added } start ++; // moves on to next number } return sds; } System.out.println(&quot;First 5 Self Divisors from 13: &quot;); for (int n : firstNumSelfDivisors(13, 5)) { System.out.print(n + &quot;, &quot;); } . First 5 Self Divisors from 13: 15, 22, 24, 33, 36, . // FULL ANSWER public class selfDivisor { /* * @param number the number to be tested * Precondition: number 0 &gt; * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copynum = number; while (number &gt; 0) { int digit = number % 10; // get last digit by getting remainder of division by 10 (int will eliminate decimal point) if (digit ==0 || copynum % digit != 0) { // if remainder of number and digit isnt 0, not divisble return false; // cant have 0, every digit must be divisible } number /= 10; // divide number by 10 for next iteration in order to get the next digit } return true; } /* * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] sds = new int[num]; // starting empty list with lenght equal to num int total = 0; // keeps track of self divisors found while (total &lt; num) { if (isSelfDivisor(start)) { sds[total] = start; // adds selected number total ++; // incremements total added } start ++; // moves on to next number } return sds; } public static void main(String[] args) { System.out.println(&quot;Is 135 a self divisor? &quot; + isSelfDivisor(135)); System.out.println(&quot;Is 31 a self divisor? &quot; + isSelfDivisor(31)); // print the array System.out.println(&quot;5 self divisors after 33: &quot;); for (int n : firstNumSelfDivisors(33, 5)) { System.out.print(n + &quot;, &quot;); } } } selfDivisor.main(null) . Is 135 a self divisor? true Is 31 a self divisor? false 5 self divisors after 33: 33, 36, 44, 48, 55, .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/09/15/AP-FRQ-1.html",
            "relUrl": "/2022/09/15/AP-FRQ-1.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Week 3 - Deployment",
            "content": "Hacks . Deployment almost completed completely | IF Loops Completed | Focus and Habits Notes | . Review Ticket . Issue . Deployment . Screenshot of Current States . Link to site . If Notebook . Notebook Link . Focus And Habits . Focus and Habits Blog .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/09/11/Week3-Deployment.html",
            "relUrl": "/markdown/2022/09/11/Week3-Deployment.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Java Conditionals Notebook",
            "content": "If Statements . If statements evaluate the conditional given, and if true, execute the code block inside the statement. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter a number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter another number: &quot;); y = scanner.nextDouble(); System.out.println(y); // Modulo function returns remainder of x and y // checks if remainder of x and y is 0 (meaning it is divisible) if (x % y == 0) { System.out.println(x + &quot; is divisible by &quot; + y); } . Enter a number: 10.0 Enter another number: 5.0 10.0 is divisible by 5.0 . If-Else Statements . If statements contain code to be run if a given conditional is true. Else statements contain code to be run if that conditional is proven false. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter a number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter another number: &quot;); y = scanner.nextDouble(); System.out.println(y); // Modulo function returns remainder of x and y // checks if remainder of x and y is 0 (meaning it is divisible) if (x % y == 0) { System.out.println(x + &quot; is divisible by &quot; + y); } else { // the code below runs if the remainder of x and y is NOT 0 System.out.println(x + &quot; is NOT divisible by &quot; + y); } . Enter a number: 20.0 Enter another number: 7.0 20.0 is NOT divisible by 7.0 . If-elseif-else . Elseif blocks come between if and else statements. Elseif statements function similar to if statements in that they contain code that is run if a given conditional is true. However, elseif statements only run if the prior if or elseif block is false. Otherwise, they are passed over. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter a number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter another number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { // checks if x is greater than y System.out.println(x + &quot; is greater than &quot; + y); } else if (x == y) { // if x isnt greater than y, check if theyre equal System.out.println(x + &quot; is equal to &quot; + y); } else { // only option is x being less than y System.out.println(x + &quot; is less than &quot; + y); } . Multiple elseifs . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;First number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the operation (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (operator == &#39;+&#39;) { System.out.println(x + y); } else if (operator == &#39;-&#39;) { System.out.println(x - y); } else if (operator == &#39;*&#39;) { System.out.println(x * y); } else if (operator == &#39;/&#39;) { System.out.println(x / y); } else { System.out.println(&quot;Invalid operator&quot;); } . First number: 7.0 Enter the operation (+,-,*,/): 9 second number: 9.0 Invalid operator . double num1, num2; Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter a color (r,g,b,y): &quot;); char color = scanner.next().charAt(0); System.out.println(color); Scanner newScanner = new Scanner(System.in); System.out.println(&quot;type a message&quot;); String message = newScanner.nextLine(); String output = &quot;&quot;; switch (color) { case &#39;r&#39;: output = &quot; u001B[31m&quot;; break; case &#39;g&#39;: output = &quot; u001B[32m&quot;; break; case &#39;b&#39;: output = &quot; u001B[34m&quot;; break; case &#39;y&#39;: output = &quot; u001B[33m&quot;; break; default: System.out.println(&quot;invalid color&quot;); break; } System.out.println(&quot;The final result: &quot;); System.out.println(output + message); . Enter a color (r,g,b,y): g type a message The final result: fadfadf . De Morgan&#39;s Law . Augstus De Morgan developed DeMorgan&#39;s laws in the 1800s. DeMorgan&#39;s law explains complex conditional negation. A complex conditional is multiple conditional statements joined by a logical operator. . not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b . not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b . Negation modifies each conditional. . public class DeMorgansAndTest { public static void main(String[] args) { int x = 15; int y = 164; System.out.println(!(x&lt;20 &amp;&amp; y &gt; 100)); // prints true if x is not less than 20 or if y is not greater than 100 // prints false if none of these are true // this output should be false since x is less than 20 and y is greater than 100 } } DeMorgansAndTest.main(null) . false . public class DeMorgansOrTest { public static void main(String[] args) { int x = 124; int y = 9; System.out.println(!(x &gt; 200 || y &lt; 2)); // prints true if x is not &gt; 200 AND y is not &lt; 2 // prints false otherwise // this output should be true as x is NOT greater than 200 and y is NOT less than 2 } } DeMorgansOrTest.main(null) . true .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/09/09/Java-If-Notebook.html",
            "relUrl": "/2022/09/09/Java-If-Notebook.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Java Menu",
            "content": "Java Menu . import java.net.http.*; import java.util.Scanner; . import java.util.Scanner; import java.lang.Math; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; public final String[][] COLORS = { {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, {&quot;Reset&quot;,&quot; u001B[0m&quot;}, {&quot;Liverpool&quot;,&quot; 033[1;91m&quot;}, {&quot;Tottenham&quot;,&quot; 033[0;107m&quot;}, {&quot;Real&quot;,&quot; 033[0;95m&quot;}, {&quot;Bayern&quot;,&quot; 033[0;101m&quot;}, {&quot;Dortmund&quot;, &quot; 033[0;93m&quot;}, }; public final int NAME = 0; public final int ANSI = 1; public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Soccer Info&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Premier League Scorers&quot;); System.out.println(&quot;2 - La Liga Scorers&quot;); System.out.println(&quot;3 - Champions Scorers &quot;); System.out.println(&quot;4 - Bundesliga Scorers&quot;); System.out.println(&quot;5 - Serie A Scorers&quot;); System.out.println(&quot;6 - Goals Against Calculator&quot;); System.out.println(&quot;7 - Shooting Percentage Calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: System.out.print(&quot;Program Exiting...&quot;); quit = true; break; case 1: System.out.println(COLORS[4][ANSI] + &quot;Premier League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Son&quot; + COLORS[8][ANSI]); System.out.println(COLORS[1][ANSI] + &quot; t Cristiano Ronaldo&quot; + COLORS[8][ANSI]); System.out.println(&quot; t&quot; + COLORS[10][ANSI] + &quot;Harry Kane&quot; + COLORS[8][ANSI]); System.out.println(COLORS[9][ANSI] + &quot; t Sadio Mane&quot; + COLORS[8][ANSI]); break; case 2: System.out.println(COLORS[1][ANSI] + &quot;La Liga Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Iago Aspas&quot;); System.out.println(&quot; t Raul de Tomas&quot;); System.out.println(COLORS[11][ANSI] + &quot; t Vinicius&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Juanmi&quot;); // for(int i = 0; i &lt; COLORS.length; i++) // System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.println(COLORS[6][ANSI] + &quot;Champions League Top Scorers&quot; + COLORS[8][ANSI]); System.out.println(COLORS[11][ANSI] + &quot; t Karim Benzema&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Sébastien Haller&quot;); System.out.println(COLORS[9][ANSI] + &quot; t Mohamed Salah&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Christopher Nkunku&quot;); // for (int i = 0; i &lt; 20; i++) { // int random = (int) (Math.random() * COLORS.length); // try { // Thread.sleep(100); // } catch (Exception e) { // System.out.println(e); // } // System.out.print(COLORS[random][ANSI] + &quot;#&quot;); // } break; case 4: System.out.println(COLORS[5][ANSI] + &quot;Bundesliga&quot; + COLORS[8][ANSI]); System.out.println(&quot; t u001B[37m&quot; + COLORS[12][ANSI] + &quot;Robert Lewangoalski&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Patrick Schick&quot;); System.out.println(&quot; t 033[0;93m&quot; + COLORS[13][ANSI] + &quot;Erling Haaland&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Anothny Modeste&quot;); System.out.println(&quot; t Christopher Nkunku&quot;); break; case 5: System.out.println(COLORS[2][ANSI] + &quot;Serie A&quot; + COLORS[8][ANSI]); System.out.println(&quot; t Ciro Immobile&quot;); System.out.println(&quot; t Dušan Vlahović&quot;); System.out.println(&quot; t Lautaro Martínez&quot;); System.out.println(&quot; t Tammy Abraham&quot;); System.out.println(&quot; t Giovanni Simeone&quot;); break; case 6: Scanner myObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Against and Games Played:&quot;); int GoalsAgainst = myObj.nextInt(); double GamesPlayed = myObj.nextDouble(); myObj.close(); System.out.println(&quot;Goals Against Average: &quot; + GoalsAgainst/GamesPlayed); case 7: Scanner newObj = new Scanner(System.in); System.out.println(&quot;Enter Goals Scored and Shots Taken:&quot;); int GoalsScored = newObj.nextInt(); double ShotsTaken = newObj.nextDouble(); newObj.close(); System.out.println(&quot;Shooting Percentage: &quot; + GoalsScored/ShotsTaken); default: System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Soccer Info - 1 - Premier League Scorers 2 - La Liga Scorers 3 - Champions Scorers 4 - Bundesliga Scorers 5 - Serie A Scorers 6 - Goals Against Calculator 7 - Shooting Percentage Calculator 0 - Quit - 1 1: Premier League Top Scorers Mohamed Salah Son Cristiano Ronaldo Harry Kane Sadio Mane 7 7: Enter Goals Scored and Shots Taken: 10 40 Shooting Percentage: 0.25 Unexpected choice, try again. 0 0: Program Exiting... .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/08/31/Java-Objects-Menu.html",
            "relUrl": "/2022/08/31/Java-Objects-Menu.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "NATM Blog",
            "content": "Photos of NATM Presentations to different groups: . . . . . There were multiple different exhibits at Night at the museum for groups to showcase their projects. At our exhibit, we allowed visitors to interact directly with our webiste They could play our api based sports trivia quiz and manipulate the votes on the predictions page to see the live reactions. . Review Ticket / Tangibles . Backend . Backend Repo | Backend Website | Votes API | Trivia API | Self Made Predictions API | | . Frontend . Frontend Repo | Index.html | Quiz.html | Votes.html | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/08/03/natm-blog.html",
            "relUrl": "/markdown/2022/08/03/natm-blog.html",
            "date": " • Aug 3, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[1][2] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; System.out.println(arr[2][2]); // Print the last element in the array! } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; arr[2][0] = &quot;Athens&quot;; System.out.println(arr[2][0]); // Change Austin to Athens and print! } } Test.main(null); . Athens . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for (int row = 0, row &lt; arr.length, row ++) { } } } Test.main(null); . String[][] tree = { {&quot; &quot;,&quot; &quot;,&quot;*&quot;,&quot; &quot;,&quot; &quot;}, {&quot; &quot;,&quot;*&quot;,&quot;*&quot;,&quot;*&quot;,&quot; &quot;}, {&quot;*&quot;,&quot;*&quot;,&quot;*&quot;,&quot;*&quot;,&quot;*&quot;} }; for (String[] row : tree) { for (String item : row) { System.out.print(item); } System.out.println(&quot;&quot;); } . * *** ***** . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } } Test.main(null); . Use nested for loops to find the longest or shortest string! . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. .",
            "url": "https://sanjayb06.github.io/tri1fastpages/jupyter/2022/06/12/Unit-8-HW.html",
            "relUrl": "/jupyter/2022/06/12/Unit-8-HW.html",
            "date": " • Jun 12, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Code.org Key Learning",
            "content": "Lesson 10 . . Inheritance: This code syntax shows how to create a new Child class that inherits from a parents class. All the methods and attributes can now be used in the new child class. . . The extends keyword shows that the new PainterPlus class inherits from the original Painter class. This means that it inherits all of its properties and methods, and that these methods can be used in the new class. . PainterPlus.java . . MyNeighborhood.java . . Methods . Lesson 14 . PainterPlus.java . PainterPlus extends everything from the Painter parent class. . PatternPainter.java . PatternPainter inherits from the PainterPlus class. Since PainterPlus inherits from Painter, PatternPainter will be able to use both PainterPlus and Painter methods and attributes. . BackgroundPainter.java . BackgroundPainter goes even further and extends from PatternPainter, meaning it can use methods from PatternPainter as well as PainterPlus and Painter. . Check For Understanding . . Taco extending food is the only one that represents a class inheritance example because Taco is a subclass of Food. .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/06/09/Code-Key-Learning.html",
            "relUrl": "/markdown/2022/06/09/Code-Key-Learning.html",
            "date": " • Jun 9, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Week 2 - Primitives",
            "content": "Hacks . Java Menu Created with colors &amp; input | Code.org up to 15 | . Review Ticket . Issue . Notebooks . Java Menu Notebook . . Code.org Learning . Code.org Key Learning .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2022/05/09/Week-2-Menu.html",
            "relUrl": "/markdown/2022/05/09/Week-2-Menu.html",
            "date": " • May 9, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Arrays and Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;dice&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics dice = new Pics(&quot;dice&quot;, &quot;png&quot;); dice.printStats(&quot;Original&quot;); dice.resize(33); dice.printStats(&quot;Scaled&quot;); dice.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 226933 800x600 images/dice.png Scaled: 55342 264x198 images/tmp/dice.png Original: 0 0x0 images/pumpkin.png Scaled: 0 0x0 images/pumpkin.png . java.lang.NullPointerException: Cannot invoke &#34;java.awt.image.BufferedImage.getHeight()&#34; because &#34;&lt;local1&gt;&#34; is null at Pics.convertToAscii(#35:1) at Pics.main(#35:1) at .(#37:1) . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics godfather = new Pics(&quot;godfather&quot;, &quot;png&quot;); // godfather.greyscale(); // godfather.redscale(); // godfather.greenscale(); // godfather.bluescale(); // godfather.printStats(&quot;Original&quot;); // godfather.resize(33); // godfather.printStats(&quot;Scaled&quot;); godfather.convertToAscii(); } } Pics.main(null); .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/02/10/Java-Images.html",
            "relUrl": "/2022/02/10/Java-Images.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Java API",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://odds.p.rapidapi.com/v1/odds?region=us&amp;sport=upcoming&amp;oddsFormat=decimal&amp;market=h2h&amp;dateFormat=iso&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;6279ac9b7amsh7dc015c7d7746fbp1f4d65jsn125b0c500438&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;odds.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;success&#34;:true,&#34;data&#34;:[{&#34;id&#34;:&#34;96824c3d9232f9fb57c2bcc1d1164f7b&#34;,&#34;sport_key&#34;:&#34;soccer_sweden_allsvenskan&#34;,&#34;sport_nice&#34;:&#34;Allsvenskan - Sweden&#34;,&#34;teams&#34;:[&#34;IFK V u00e4rnamo&#34;,&#34;Mj u00e4llby AIF&#34;],&#34;home_team&#34;:&#34;IFK V u00e4rnamo&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.9,2.48,3.25]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:52:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.9,2.48,3.25]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.9,2.48,3.25]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.9,2.48,3.25]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.9,2.48,3.25]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.7,2.45,3.1]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.88,2.54,2.95]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.8,2.65,3.1]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.85,2.5,3.2]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:34Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.85,2.55,3.25]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.6,2.38,3.0]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.0,2.64,3.35],&#34;h2h_lay&#34;:[3.1,2.68,3.45]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:34Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.75,2.65,3.25]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:34Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.83,2.47,3.3]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:35Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.85,2.5,3.15]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:27Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.86,2.6,3.32]}}],&#34;sites_count&#34;:16},{&#34;id&#34;:&#34;bad5db7ccee040fe2ee4ea1b9d2a0e2f&#34;,&#34;sport_key&#34;:&#34;soccer_sweden_superettan&#34;,&#34;sport_nice&#34;:&#34;Superettan - Sweden&#34;,&#34;teams&#34;:[&#34;J u00f6nk u00f6pings S u00f6dra IF&#34;,&#34;Trelleborgs FF&#34;],&#34;home_team&#34;:&#34;Trelleborgs FF&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:17Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,1.9,3.65]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:50:33Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,1.89,3.65]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:38Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,1.89,3.65]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:15Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,1.89,3.65]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:16Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,1.89,3.65]}},{&#34;site_key&#34;:&#34;mybookieag&#34;,&#34;site_nice&#34;:&#34;MyBookie.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:15Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.55,1.9,3.45]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:15Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.8,1.83,3.5]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.8,1.95,3.4]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.25,1.91,3.25]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:16Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[4.0,2.0,3.8],&#34;h2h_lay&#34;:[4.2,2.04,3.85]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:19Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.6,1.85,3.5]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.25,1.96,3.55]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:16Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.6,1.94,3.55]}}],&#34;sites_count&#34;:13},{&#34;id&#34;:&#34;b0f22ec0435bf598159ca89311761b9f&#34;,&#34;sport_key&#34;:&#34;soccer_denmark_superliga&#34;,&#34;sport_nice&#34;:&#34;Denmark Superliga&#34;,&#34;teams&#34;:[&#34;FC Nordsjaelland&#34;,&#34;Randers FC&#34;],&#34;home_team&#34;:&#34;FC Nordsjaelland&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.95,3.6,3.75]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:52:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.93,3.6,3.8]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:33Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.34,8.0,5.25]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:33Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.34,8.0,5.25]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.94,3.6,3.75]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.95,3.65,3.5]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.91,3.15,3.3]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:34Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.94,3.45,3.7]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.95,3.5,3.7]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.0,3.6,3.75]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.91,3.5,3.75]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.0,3.5,3.8]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:12Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.87,3.5,3.6]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.02,3.9,3.95],&#34;h2h_lay&#34;:[2.04,3.95,4.0]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:08Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.94,3.67,3.63]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.95,3.75,3.9]}},{&#34;site_key&#34;:&#34;lowvig&#34;,&#34;site_nice&#34;:&#34;LowVig.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.95,3.75,3.9]}}],&#34;sites_count&#34;:17},{&#34;id&#34;:&#34;954a65788d782474d41d1cebaeaae1ec&#34;,&#34;sport_key&#34;:&#34;soccer_poland_ekstraklasa&#34;,&#34;sport_nice&#34;:&#34;Ekstraklasa - Poland&#34;,&#34;teams&#34;:[&#34;Warta Pozna u0144&#34;,&#34; u015al u0105sk Wroc u0142aw&#34;],&#34;home_team&#34;:&#34; u015al u0105sk Wroc u0142aw&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:19Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.38,2.95]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:19Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.0,2.48,2.93]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:41Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.38,2.95]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.05,2.55,2.85]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:51:29Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.4,2.95]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:51:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.4,2.95]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.1,2.5,2.95]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.0,2.4,2.85]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:20Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.25,2.68,3.05],&#34;h2h_lay&#34;:[3.3,2.7,3.1]}}],&#34;sites_count&#34;:9},{&#34;id&#34;:&#34;d3298e1305d45bc1c84a65113c1fda8f&#34;,&#34;sport_key&#34;:&#34;soccer_turkey_super_league&#34;,&#34;sport_nice&#34;:&#34;Turkey Super League&#34;,&#34;teams&#34;:[&#34;Fatih Karag u00fcmr u00fck&#34;,&#34;Istanbulspor&#34;],&#34;home_team&#34;:&#34;Fatih Karag u00fcmr u00fck&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:50Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.76,4.1,3.8]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.76,4.1,3.8]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:50Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.87,3.95,3.65]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.83,4.2,3.8]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:31Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.83,4.0,3.6]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:54:38Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.77,4.1,3.8]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:29Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.85,4.0,3.6]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:51Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.76,4.1,3.8]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.77,3.95,3.55]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:00Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.83,4.0,3.75]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:01Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.8,4.15,3.8]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:51Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.88,4.4,4.0],&#34;h2h_lay&#34;:[1.89,4.5,4.2]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:01Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.87,4.05,3.7]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.77,4.3,4.0]}}],&#34;sites_count&#34;:14},{&#34;id&#34;:&#34;37ce4313433c8e74e1f08ac5a0ffde0a&#34;,&#34;sport_key&#34;:&#34;icehockey_sweden_allsvenskan&#34;,&#34;sport_nice&#34;:&#34;HockeyAllsvenskan&#34;,&#34;teams&#34;:[&#34;V u00e4sterviks IK&#34;,&#34; u00d6stersunds IK&#34;],&#34;home_team&#34;:&#34; u00d6stersunds IK&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:40Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.4,2.4,4.35]}}],&#34;sites_count&#34;:1},{&#34;id&#34;:&#34;abbb0d455f59cd437f360aace12b0991&#34;,&#34;sport_key&#34;:&#34;soccer_sweden_allsvenskan&#34;,&#34;sport_nice&#34;:&#34;Allsvenskan - Sweden&#34;,&#34;teams&#34;:[&#34;IF Elfsborg&#34;,&#34;IFK Goteborg&#34;],&#34;home_team&#34;:&#34;IFK Goteborg&#34;,&#34;commence_time&#34;:&#34;2022-10-03T17:10:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.23,2.9,3.5]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.28,2.95,3.6]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.28,2.95,3.6]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.28,2.95,3.6]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.28,2.95,3.6]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.2,2.9,3.5]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,2.95,3.45]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.05,3.45]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.0,3.65]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,2.95,3.6]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.2,2.65,3.25]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.36,3.15,3.8],&#34;h2h_lay&#34;:[2.4,3.2,3.85]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.0,3.7]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.23,2.99,3.6]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.2,2.95,3.6]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.29,3.07,3.65]}}],&#34;sites_count&#34;:16},{&#34;id&#34;:&#34;f0a9a49e94e0b7180baf9166ad30efd3&#34;,&#34;sport_key&#34;:&#34;soccer_france_ligue_two&#34;,&#34;sport_nice&#34;:&#34;Ligue 2 - France&#34;,&#34;teams&#34;:[&#34;Bordeaux&#34;,&#34;Stade Lavallois&#34;],&#34;home_team&#34;:&#34;Stade Lavallois&#34;,&#34;commence_time&#34;:&#34;2022-10-03T18:45:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:13Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.15,3.15]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:45Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.25,3.35]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:11Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.2,3.05,3.15]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:13Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.15,3.15]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:42Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.15,3.15]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.15,3.15]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:17Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.15,3.15]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:12Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.25,3.1,3.2]}},{&#34;site_key&#34;:&#34;superbook&#34;,&#34;site_nice&#34;:&#34;SuperBook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,3.2,3.3]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:42Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.2,3.2,3.2]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:12Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,3.15,3.35]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:14Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.34,3.4,3.45],&#34;h2h_lay&#34;:[2.38,3.5,3.5]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,3.15,3.15]}}],&#34;sites_count&#34;:13},{&#34;id&#34;:&#34;b1c782e8026351bb219e876b8e83731c&#34;,&#34;sport_key&#34;:&#34;soccer_league_of_ireland&#34;,&#34;sport_nice&#34;:&#34;League of Ireland&#34;,&#34;teams&#34;:[&#34;Shelbourne Dublin&#34;,&#34;St Patricks Athletic&#34;],&#34;home_team&#34;:&#34;Shelbourne Dublin&#34;,&#34;commence_time&#34;:&#34;2022-10-03T18:45:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.05]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:49Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.75,2.3,3.1],&#34;h2h_lay&#34;:[3.95,2.38,3.25]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:58Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.35,2.26,2.95]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,2.9]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.55,2.25,3.1]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:31Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.4,2.25,2.9]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.05]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:31Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.05]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:31Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.05]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.2,2.95]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.35,2.11,2.85]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.4,2.2,2.85]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.25,3.1]}}],&#34;sites_count&#34;:13},{&#34;id&#34;:&#34;7461c577eb5bc13015cda02590a7ccc7&#34;,&#34;sport_key&#34;:&#34;soccer_italy_serie_a&#34;,&#34;sport_nice&#34;:&#34;Serie A - Italy&#34;,&#34;teams&#34;:[&#34;Hellas Verona FC&#34;,&#34;Udinese&#34;],&#34;home_team&#34;:&#34;Hellas Verona FC&#34;,&#34;commence_time&#34;:&#34;2022-10-03T18:45:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.1,3.4]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.12,3.45]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.35,2.1,3.35]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.15,3.45]}},{&#34;site_key&#34;:&#34;mybookieag&#34;,&#34;site_nice&#34;:&#34;MyBookie.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.44,2.13,3.46]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.15,3.5]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.65,2.22,3.55],&#34;h2h_lay&#34;:[3.7,2.24,3.6]}},{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:33Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.17,3.35]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:38Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.17,3.35]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.17,3.35]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:42Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.17,3.35]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:09Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.2,3.4]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:39Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.4,2.15,3.4]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.52]}},{&#34;site_key&#34;:&#34;lowvig&#34;,&#34;site_nice&#34;:&#34;LowVig.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.52]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:06Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.5,2.15,3.5]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.35,2.1,3.4]}},{&#34;site_key&#34;:&#34;superbook&#34;,&#34;site_nice&#34;:&#34;SuperBook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:07Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.45,2.15,3.45]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:13Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.39,2.08,3.52]}}],&#34;sites_count&#34;:19},{&#34;id&#34;:&#34;bb937553dfa972924270801c735ef3b5&#34;,&#34;sport_key&#34;:&#34;soccer_epl&#34;,&#34;sport_nice&#34;:&#34;EPL&#34;,&#34;teams&#34;:[&#34;Leicester City&#34;,&#34;Nottingham Forest&#34;],&#34;home_team&#34;:&#34;Leicester City&#34;,&#34;commence_time&#34;:&#34;2022-10-03T19:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.71,4.6,4.2]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.7,4.6,4.2]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:21Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.7,4.6,4.2]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:21Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.73,4.7,4.25]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:20Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.73,4.7,4.25]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:20Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.7,4.1]}},{&#34;site_key&#34;:&#34;mybookieag&#34;,&#34;site_nice&#34;:&#34;MyBookie.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.7,4.1]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:23Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.75,4.0]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:20Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.8,4.1]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.7,3.9]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:23Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.7,4.5,3.9]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.75,5.0,4.3],&#34;h2h_lay&#34;:[1.76,5.1,4.4]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.67,4.6,4.1]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:24Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.71,4.75,4.1]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.71,4.75,4.1]}},{&#34;site_key&#34;:&#34;pointsbetus&#34;,&#34;site_nice&#34;:&#34;PointsBet (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.72,4.4,4.0]}},{&#34;site_key&#34;:&#34;superbook&#34;,&#34;site_nice&#34;:&#34;SuperBook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:21Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.69,4.7,4.05]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[1.66,4.69,4.1]}}],&#34;sites_count&#34;:18},{&#34;id&#34;:&#34;0536cb46f6fdfbb7f41a8c3b883c98a3&#34;,&#34;sport_key&#34;:&#34;soccer_spain_la_liga&#34;,&#34;sport_nice&#34;:&#34;La Liga - Spain&#34;,&#34;teams&#34;:[&#34;Elche CF&#34;,&#34;Rayo Vallecano&#34;],&#34;home_team&#34;:&#34;Rayo Vallecano&#34;,&#34;commence_time&#34;:&#34;2022-10-03T19:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.25,1.61,3.85]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.8,1.62,3.8]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:43Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.4,1.65,3.75]}},{&#34;site_key&#34;:&#34;mybookieag&#34;,&#34;site_nice&#34;:&#34;MyBookie.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:35Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.4,1.64,3.9]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:33Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[6.2,1.68,4.0],&#34;h2h_lay&#34;:[6.4,1.69,4.1]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:03Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.5,1.65,3.8]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:32Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.64,3.8]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:41Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.64,3.8]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.66,3.85]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:12Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.64,3.8]}},{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:05Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.64,3.8]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:10Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.5,1.65,3.75]}},{&#34;site_key&#34;:&#34;lowvig&#34;,&#34;site_nice&#34;:&#34;LowVig.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:39Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.85,1.65,3.9]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:53Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.85,1.64,3.9]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:37Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.75,1.65,3.9]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:53Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.6,1.65,3.9]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:36Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.5,1.62,3.7]}},{&#34;site_key&#34;:&#34;superbook&#34;,&#34;site_nice&#34;:&#34;SuperBook&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:42Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[5.5,1.64,3.9]}}],&#34;sites_count&#34;:18},{&#34;id&#34;:&#34;02c9a813f79d0a6f2f5ebba74972f484&#34;,&#34;sport_key&#34;:&#34;soccer_spain_segunda_division&#34;,&#34;sport_nice&#34;:&#34;La Liga 2 - Spain&#34;,&#34;teams&#34;:[&#34;SD Eibar&#34;,&#34;Zaragoza&#34;],&#34;home_team&#34;:&#34;Zaragoza&#34;,&#34;commence_time&#34;:&#34;2022-10-03T19:00:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:46Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.95,2.45,2.85]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.1,2.55,3.0]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:36Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.55,2.95]}},{&#34;site_key&#34;:&#34;superbook&#34;,&#34;site_nice&#34;:&#34;SuperBook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.15,2.5,3.0]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.1,2.45,2.8]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:17Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.0,2.5,2.88]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:44Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.95,2.48,2.9]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:47Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.95,2.48,2.9]}},{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:15Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.95,2.45,2.88]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:20Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.3,2.62,3.05],&#34;h2h_lay&#34;:[3.45,2.7,3.1]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:13Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[3.0,2.5,2.86]}}],&#34;sites_count&#34;:11},{&#34;id&#34;:&#34;44d2a575dc0e5c58cc27f4cb3f5b9a3f&#34;,&#34;sport_key&#34;:&#34;soccer_portugal_primeira_liga&#34;,&#34;sport_nice&#34;:&#34;Primeira Liga - Portugal&#34;,&#34;teams&#34;:[&#34;Casa Pia&#34;,&#34;CS Maritimo&#34;],&#34;home_team&#34;:&#34;CS Maritimo&#34;,&#34;commence_time&#34;:&#34;2022-10-03T19:15:00Z&#34;,&#34;sites&#34;:[{&#34;site_key&#34;:&#34;unibet&#34;,&#34;site_nice&#34;:&#34;Unibet&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:58:49Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.32,3.25,3.05]}},{&#34;site_key&#34;:&#34;betrivers&#34;,&#34;site_nice&#34;:&#34;BetRivers&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:57Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.32,3.25,3.05]}},{&#34;site_key&#34;:&#34;sugarhouse&#34;,&#34;site_nice&#34;:&#34;SugarHouse&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.32,3.25,3.05]}},{&#34;site_key&#34;:&#34;barstool&#34;,&#34;site_nice&#34;:&#34;Barstool Sportsbook&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:53Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.32,3.25,3.05]}},{&#34;site_key&#34;:&#34;twinspires&#34;,&#34;site_nice&#34;:&#34;TwinSpires&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:53Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.32,3.25,3.05]}},{&#34;site_key&#34;:&#34;williamhill_us&#34;,&#34;site_nice&#34;:&#34;William Hill (US)&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:01:22Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.4,3.1,3.2]}},{&#34;site_key&#34;:&#34;foxbet&#34;,&#34;site_nice&#34;:&#34;FOX Bet&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:28Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.38,3.0,3.25]}},{&#34;site_key&#34;:&#34;mybookieag&#34;,&#34;site_nice&#34;:&#34;MyBookie.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:58Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.38,3.05,3.2]}},{&#34;site_key&#34;:&#34;draftkings&#34;,&#34;site_nice&#34;:&#34;DraftKings&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:56Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.4,3.0,3.3]}},{&#34;site_key&#34;:&#34;wynnbet&#34;,&#34;site_nice&#34;:&#34;WynnBET&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.4,3.1,3.2]}},{&#34;site_key&#34;:&#34;bovada&#34;,&#34;site_nice&#34;:&#34;Bovada&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:26Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.4,3.05,3.05]}},{&#34;site_key&#34;:&#34;intertops&#34;,&#34;site_nice&#34;:&#34;Intertops&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:58:50Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.35,3.1,3.1]}},{&#34;site_key&#34;:&#34;fanduel&#34;,&#34;site_nice&#34;:&#34;FanDuel&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:56Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.3,3.0,3.0]}},{&#34;site_key&#34;:&#34;gtbets&#34;,&#34;site_nice&#34;:&#34;GTbets&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.31,3.1,3.28]}},{&#34;site_key&#34;:&#34;betfair&#34;,&#34;site_nice&#34;:&#34;Betfair&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:59:30Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.48,3.3,3.25],&#34;h2h_lay&#34;:[2.52,3.4,3.35]}},{&#34;site_key&#34;:&#34;lowvig&#34;,&#34;site_nice&#34;:&#34;LowVig.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T16:58:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.44,2.83,3.15]}},{&#34;site_key&#34;:&#34;betonlineag&#34;,&#34;site_nice&#34;:&#34;BetOnline.ag&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:25Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.44,2.83,3.15]}},{&#34;site_key&#34;:&#34;betus&#34;,&#34;site_nice&#34;:&#34;BetUS&#34;,&#34;last_update&#34;:&#34;2022-10-03T17:00:52Z&#34;,&#34;odds&#34;:{&#34;h2h&#34;:[2.35,3.2,3.2]}}],&#34;sites_count&#34;:18}]} . package com.nighthawk.spring_portfolio.mvc.translate; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/google-translate1&quot;) //prefix of API public class translate { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getTranslate() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://odds.p.rapidapi.com/v1/odds?region=us&amp;sport=upcoming&amp;oddsFormat=decimal&amp;market=h2h&amp;dateFormat=iso&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;6279ac9b7amsh7dc015c7d7746fbp1f4d65jsn125b0c500438&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;odds.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } .",
            "url": "https://sanjayb06.github.io/tri1fastpages/2022/02/10/Java-API.html",
            "relUrl": "/2022/02/10/Java-API.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Week 1 - Primitives",
            "content": "Hacks . Issue . Notebooks . Bash Notebook | Java Primitives Notebook | . Productive Blogging . Vocab Page Added | . Code.org Learning . . Study Plan . Capture information that will grow to 10 CB Units . Daily CB videos Organize jupyter based on units w/ key code segments | . | Practice AP MCs and FRQs, especially near April | Collegeboard work and practice | . As AP Test date gets closer I will: . Take practice tests to determine strong and weak concepts Review old material and search for new resources | . | Take practice MCs | Take practice FRQs | Take full lenght, sit down, timed AP exams | .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2021/08/28/Week-1-Primitives.html",
            "relUrl": "/markdown/2021/08/28/Week-1-Primitives.html",
            "date": " • Aug 28, 2021"
        }
        
    
  
    
        ,"post42": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sanjayb06.github.io/tri1fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post43": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post44": {
            "title": "Week 0 - Tools",
            "content": "Hacks . Hack #1: Fastpages . Python Jupyter Notebook . Java Jupyter Notebook . Editing fastpage in vscode: . Hack #2: Java Runtime . Java running on Localhost port 8080 . Tangibles . Fastpage Insights . Java Insights . Week 0 Review Ticket . Spring Commit .",
            "url": "https://sanjayb06.github.io/tri1fastpages/markdown/2020/01/14/Week-0-Tools.html",
            "relUrl": "/markdown/2020/01/14/Week-0-Tools.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sanjayb06.github.io/tri1fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "Vocab",
          "content": "",
          "url": "https://sanjayb06.github.io/tri1fastpages/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sanjayb06.github.io/tri1fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}